{
  "version": 3,
  "sources": ["../../../node_modules/packages/common/data/data-type.ts", "../../../node_modules/packages/common/data/string.ts", "../../../node_modules/packages/common/data/number.ts", "../../../node_modules/packages/common/date/date.ts", "../../../node_modules/packages/common/data-structure/tree/helper.ts", "../../../node_modules/packages/common/data-structure/tree.ts", "../../../node_modules/packages/common/codec/base64.ts", "../../../node_modules/packages/common/anime/tween.ts", "../../../node_modules/packages/common/data/array.ts", "../../../node_modules/packages/common/data-structure/stack.ts", "../../../node_modules/packages/common/data-structure/tree/tree-node.ts", "../../../node_modules/packages/common/env/env.ts", "../../../node_modules/packages/common/optimize/concurrence.ts", "../../../node_modules/packages/common/optimize/safe.ts", "../../../node_modules/packages/common/optimize/timer.ts", "../../../node_modules/packages/common/path/path.ts", "../../../node_modules/packages/common/data/object.ts", "../../../node_modules/packages/common/data/common.ts", "../../../node_modules/packages/fe/cache/cache.ts", "../../../node_modules/packages/fe/worker/worker.ts", "../../../node_modules/ui/shared/constants.ts", "../../../node_modules/ui/utils/helper/make-bem.ts", "../../../node_modules/ui/utils/dom/class-name.ts", "../../../node_modules/ui/utils/dom/position.ts"],
  "sourcesContent": ["type DataType =\n  | 'object'\n  | 'array'\n  | 'string'\n  | 'number'\n  | 'blob'\n  | 'date'\n  | 'undefined'\n  | 'function'\n  | 'boolean'\n  | 'file'\n  | 'formdata'\n  | 'symbol'\n  | 'promise'\n  | 'null'\n  | 'arraybuffer'\n\n/**\n * 获取值对应的类型字符串\n * @param value 值\n */\nexport function getDataType(value: any) {\n  return Object.prototype.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase() as DataType\n}\n\n/**\n * 是否是对象\n * @param value 值\n */\nexport function isObj(value: any): value is Record<string, any> {\n  return getDataType(value) === 'object'\n}\n\n/**\n * 是否是数组\n * @param value 值\n */\nexport function isArray(value: any): value is Array<any> {\n  return getDataType(value) === 'array'\n}\n\n/**\n * 是否是字符串\n * @param value 值\n */\nexport function isString(value: any): value is string {\n  return getDataType(value) === 'string'\n}\n\n/**\n * 是否是数字\n * @param value 值\n */\nexport function isNumber(value: any): value is number {\n  return getDataType(value) === 'number'\n}\n\n/**\n * 是否是Blob流\n * @param value 值\n */\nexport function isBlob(value: any): value is Blob {\n  return getDataType(value) === 'blob'\n}\n\n/**\n * 是否是\n * @param value 值\n */\nexport function isDate(value: any): value is Date {\n  return getDataType(value) === 'date'\n}\n\n/**\n * 是否是未定义\n * @param value 值\n */\nexport function isUndef(value: any): value is undefined {\n  return value === undefined\n}\n\n/**\n * 是否是函数\n * @param value 值\n */\nexport function isFunction(value: any): value is Function {\n  return getDataType(value) === 'function'\n}\n\n/**\n * 是否是布尔值\n * @param value 值\n */\nexport function isBol(value: any): value is boolean {\n  return getDataType(value) === 'boolean'\n}\n\n/**\n * 是否是文件\n * @param value 值\n */\nexport function isFile(value: any): value is File {\n  return getDataType(value) === 'file'\n}\n\n/**\n * 是否是表单数据\n * @param value 值\n */\nexport function isFormData(value: any): value is FormData {\n  return getDataType(value) === 'formdata'\n}\n\n/**\n * 是否是Symbol\n * @param value 值\n */\nexport function isSymbol(value: any): value is symbol {\n  return getDataType(value) === 'symbol'\n}\n\n/**\n * 是否是Promise\n * @param value 值\n */\nexport function isPromise(value: any): value is Promise<any> {\n  return getDataType(value) === 'promise'\n}\n\n/**\n * 是否是ArrayBuffer\n * @param value 值\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n  return value instanceof ArrayBuffer\n}\n\n/**\n * 是否是Uint8Array\n * @param value 值\n */\nexport function isUint8Array(value: any): value is Uint8Array {\n  return value instanceof Uint8Array\n}\n\n/**\n * 是否是Uint16Array\n * @param value 值\n */\nexport function isUint16Array(value: any): value is Uint16Array {\n  return value instanceof Uint16Array\n}\n\n/**\n * 是否是Uint32Array\n * @param value 值\n */\nexport function isUint32Array(value: any): value is Uint32Array {\n  return value instanceof Uint32Array\n}\n\n/**\n * 是否是Int8Array\n * @param value 值\n */\nexport function isInt8Array(value: any): value is Int8Array {\n  return value instanceof Int8Array\n}\n\n/**\n * 是否是Int16Array\n * @param value 值\n */\nexport function isInt16Array(value: any): value is Int16Array {\n  return value instanceof Int16Array\n}\n\n/**\n * 是否是Int32Array\n * @param value 值\n */\nexport function isInt32Array(value: any): value is Int32Array {\n  return value instanceof Int32Array\n}\n\n/**\n * 是否是null\n * @param value 值\n */\nexport function isNull(value: any): value is null {\n  return value === null\n}\n", "/**\n * 中划线字符串转驼峰\n * @param str 原字符串\n * @param type 驼峰类型lower小驼峰, upper大驼峰, 默认lower\n * @returns\n */\nexport function camelCase(\n  str: string,\n  type: 'lower' | 'upper' = 'lower'\n): string {\n  if (str.length === 0) return str\n  let firstChar = str[0]!\n  if (type === 'upper') {\n    firstChar = firstChar.toUpperCase()\n  }\n  return (\n    firstChar +\n    str.substring(1).replace(/-[a-z]/g, s => s.substring(1).toUpperCase())\n  )\n}\n\n/**\n * 将驼峰格式的字符串转化为中划线连接的字符串\n * @param str 原字符串\n */\nexport function kebabCase(str: string): string {\n  if (str.startsWith('-')) {\n    console.error('字符串不是驼峰格式的!')\n    return str\n  }\n  const ret = str.replace(/[A-Z]/g, s => '-' + s.toLowerCase())\n  return ret.startsWith('-') ? ret.substring(1) : ret\n}\n\nclass Str {\n  #str: string\n\n  constructor(s: string) {\n    this.#str = s\n  }\n\n  /**\n   * 中划线字符串转驼峰\n   * @param type 驼峰类型lower小驼峰, upper大驼峰, 默认lower\n   * @returns\n   */\n  camelCase(type: 'upper' | 'lower' = 'lower'): string {\n    return camelCase(this.#str, type)\n  }\n\n  /**\n   * 将驼峰格式的字符串转化为中划线连接的字符串\n   * @returns\n   */\n  kebabCase(): string {\n    return kebabCase(this.#str)\n  }\n}\n\nexport function str(str: string): Str {\n  return new Str(str)\n}\n\n/**\n * 拼接路径字符串，通常用于防止拼接的路径出现重复的'/'\n * @param firstPath 路径字符串, 也可以是一个有效的URL地址\n * @param paths 待拼接的其他路径字符串\n * @returns 拼接后的路径\n *\n * @example\n * ```ts\n * str.joinPath('/a/', '/b', '/c') // '/a/b/c'\n * str.joinPath('/a/', '/b', '/c/') // '/a/b/c/'\n * str.joinPath('a/', '/b', '/c/') // '/a/b/c/'\n * ```\n */\nstr.joinPath = function joinPath(\n  firstPath: string,\n  ...paths: string[]\n): string {\n  let secondPath = paths\n    .filter(p => !!p)\n    .join('/')\n    .replace(/\\/{2,}/g, '/')\n    .replace(/^\\//, '')\n\n  if (secondPath) {\n    secondPath = `/${secondPath}`\n  }\n  // URL协议需要验证URL的合法性\n  if (/^(https?|ftp|file):\\/\\//.test(firstPath)) {\n    const origin = firstPath.replace(/:\\/*$/, '://')\n    if (origin.endsWith('//') || !origin.includes('.')) {\n      throw new Error(`无效的URL:${origin}`)\n    }\n    return `${origin.replace(/\\/+$/, '')}${secondPath}`\n  }\n\n  return `${firstPath.replace(/\\/+$/, '')}${secondPath}`\n}\n", "type CurrencyType = 'CNY' | 'CNY_HAN'\n\ntype CurrencyConfig = {\n  /** 保留小数位数 */\n  precision?: number\n  /** 最小小数位数 */\n  minPrecision?: number\n  /** 最大小数位数 */\n  maxPrecision?: number\n}\n\nfunction int(numbers: number[]) {\n  const numberStrings = numbers.map(n => String(n))\n  const numStringsLen = numberStrings.map(ns => ns.split('.')[1]?.length ?? 0)\n\n  const factor = Math.pow(10, Math.max(...numStringsLen))\n\n  return {\n    /** 整数 */\n    ints: numbers.map(n => Math.round(n * factor)),\n    /** 让所有数值成为整数的最小系数 */\n    factor\n  }\n}\n\n/**\n * 将浮点数小数部分的字符串转换为目标精度的长度并遵循四舍五入\n * @param decimalPart 浮点数的小数部分\n * @param precision 保留的小数位数\n * @param carry 进位方法\n * @returns\n */\nfunction decimalPrecision(\n  decimalPart: string,\n  precision: number,\n  carry: () => void\n) {\n  if (decimalPart.length <= precision) {\n    return decimalPart.padEnd(precision, '0')\n  }\n  // 使用小数点移位来避免精度丢失\n  // 首先在字符串中插入小数点并转化为数字, 随后进行四舍五入, 最后再转化为字符串\n  const decimalNum = Math.round(\n    +(decimalPart.slice(0, precision) + '.' + decimalPart.slice(precision))\n  )\n  const decimalRet = decimalNum ? String(decimalNum) : ''\n\n  if (decimalRet.length === precision) return decimalRet\n\n  // eg. 0.009保留2为小数 decimalRet此时为1, 所以需要再前面补0\n  if (decimalRet.length < precision) {\n    return decimalRet.padStart(precision, '0')\n  }\n  // 需要进位\n  carry()\n  return '0'.repeat(precision)\n}\n\nfunction toFixed(\n  v: number,\n  precision: number | { maxPrecision?: number; minPrecision?: number }\n) {\n  let [int, decimal = ''] = String(v).split('.') as [string, string | undefined]\n\n  let targetPrecision: undefined | number = undefined\n  if (typeof precision === 'number') {\n    targetPrecision = precision\n  } else {\n    const { maxPrecision, minPrecision } = precision\n    if (maxPrecision !== undefined && decimal.length > maxPrecision) {\n      targetPrecision = maxPrecision\n    } else if (minPrecision !== undefined && decimal.length < minPrecision) {\n      targetPrecision = minPrecision\n    }\n  }\n  if (\n    targetPrecision !== undefined &&\n    Number.isInteger(targetPrecision) &&\n    targetPrecision >= 0\n  ) {\n    decimal = decimalPrecision(\n      decimal,\n      targetPrecision,\n      () => (int = String(+int + 1))\n    )\n  }\n\n  return decimal ? int + '.' + decimal : int\n}\n\nconst CN_UPPER_NUM = '零壹贰叁肆伍陆柒捌玖'\nconst CN_INT_RADICE = ['', '拾', '佰', '仟']\nconst CN_INT_UNITS = ['', '万', '亿', '兆']\nconst CN_DEC_UNITS = ['角', '分', '毫', '厘']\n\nconst CurrencyFormatters: Record<\n  CurrencyType,\n  (num: number, config?: CurrencyConfig) => string\n> = {\n  CNY(num, config) {\n    const { precision, minPrecision, maxPrecision } = config || {}\n\n    const isNegative = num < 0\n    num = Math.abs(num)\n\n    let [intPart, decimalPart = ''] = String(num).split('.') as [\n      string,\n      string | undefined\n    ]\n\n    let targetPrecision: number | undefined = undefined\n    if (precision !== undefined) {\n      targetPrecision = precision\n    } else if (\n      maxPrecision !== undefined &&\n      decimalPart.length > maxPrecision\n    ) {\n      targetPrecision = maxPrecision\n    } else if (\n      minPrecision !== undefined &&\n      decimalPart.length < minPrecision\n    ) {\n      targetPrecision = minPrecision\n    }\n\n    if (\n      targetPrecision !== undefined &&\n      Number.isInteger(targetPrecision) &&\n      targetPrecision >= 0\n    ) {\n      decimalPart = decimalPrecision(decimalPart, targetPrecision, () => {\n        intPart = String(+intPart + 1)\n      })\n    }\n\n    let result = ''\n\n    for (let i = intPart.length; i > 0; i -= 3) {\n      result = ',' + intPart.slice(i - 3 < 0 ? 0 : i - 3, i) + result\n    }\n\n    result = result.slice(1)\n\n    if (isNegative) {\n      result = '-' + result\n    }\n\n    if (decimalPart) {\n      result = result + '.' + decimalPart\n    }\n\n    return result\n  },\n  CNY_HAN(num, config) {\n    if (!num) return '零元整'\n    let result = ''\n    if (num >= 999999999999999.9999) return result\n\n    // 是否为负数\n    const isNegative = num < 0\n\n    let [intPart, decPart] = toFixed(\n      num,\n      config?.precision !== undefined\n        ? config.precision > 4\n          ? 4\n          : config.precision\n        : 4\n    ).split('.') as [string, string | undefined]\n\n    if (isNegative) {\n      intPart = intPart.slice(1)\n    }\n\n    let count = 0\n    const IntLen = intPart!.length\n    for (let i = 0; i < IntLen; i++) {\n      let n = intPart!.substring(i, i + 1)\n      let p = IntLen - i - 1\n      let q = p / 4\n      let m = p % 4\n      if (n === '0') {\n        count++\n      } else {\n        if (count > 0) {\n          result += CN_UPPER_NUM[0]\n        }\n        count = 0\n        result += CN_UPPER_NUM[parseInt(n)]! + CN_INT_RADICE[m]\n      }\n      if (m === 0 && count < 4) {\n        result += CN_INT_UNITS[q]\n      }\n    }\n    result = `${result}元`\n    if (isNegative) {\n      result = `负${result}`\n    }\n\n    if (decPart) {\n      const decLen = decPart.length\n      for (let i = 0; i < decLen; i++) {\n        let n = decPart.substring(i, i + 1)\n        if (n !== '0') result += CN_UPPER_NUM[Number(n)]! + CN_DEC_UNITS[i]\n      }\n    } else {\n      result = `${result}整`\n    }\n    return result\n  }\n}\n\nclass Num {\n  private v!: number\n\n  constructor(n: number) {\n    this.v = n\n  }\n\n  /**\n   * 数字转货币\n   * @param currencyType 货币类型 CNY人民币 CNY_HAN 人民币中文大写\n   * @param config 其他配置, 仅precision对CNY_HAN生效\n   * @returns\n   */\n  currency(currencyType: CurrencyType, config: CurrencyConfig): string\n  /**\n   * 数字转货币\n   * @param currencyType 货币类型 CNY人民币 CNY_HAN 人民币中文大写\n   * @param precision 精度, 为CNY_HAN时最大和默认只能支持到小数点后四位(厘)\n   * @returns\n   */\n  currency(currencyType: CurrencyType, precision?: number): string\n  currency(\n    currencyType: CurrencyType,\n    config?: CurrencyConfig | number\n  ): string {\n    if (typeof config === 'number') {\n      config = {\n        precision: config\n      }\n    }\n    return CurrencyFormatters[currencyType](this.v, config)\n  }\n\n  /**\n   * 指定数字最大保留几位小数点\n   * @param precision 位数\n   */\n  fixed(\n    precision:\n      | number\n      | {\n          /** 最小精度 */\n          minPrecision?: number\n          /** 最大精度 */\n          maxPrecision?: number\n        }\n  ) {\n    return toFixed(this.v, precision)\n  }\n\n  /**\n   * 遍历数字\n   */\n  each(fn: (n: number) => void) {\n    const { v } = this\n    for (let i = 1; i <= v; i++) {\n      fn(i)\n    }\n  }\n  /**\n   * 大小区间\n   * @param min 最小值\n   * @param max 最大值\n   * @returns 一个在指定范围内的值\n   */\n  range(min: number, max: number): number {\n    if (min > max) {\n      ;[min, max] = [max, min]\n    }\n    if (this.v < min) return min\n    if (this.v > max) return max\n    return this.v\n  }\n\n  /**\n   * 限制最大值\n   * @param val 最大值\n   * @returns 一个不超过最大值的值\n   */\n  max(val: number) {\n    if (this.v > val) return val\n    return this.v\n  }\n\n  /**\n   * 限制最小值\n   * @param val 最小值\n   * @returns  一个不小于最小值的值\n   */\n  min(val: number) {\n    if (this.v < val) return val\n    return this.v\n  }\n}\n\n/**\n * 包裹一个数字以方便\n * @param n 数字\n */\nconst n = function n(n: number) {\n  return new Num(n)\n}\n\n/**\n * 求和\n * @param numbers 需要求和的数字\n * @returns\n */\nn.sum = function (...numbers: number[]) {\n  return n.plus(...numbers)\n}\n\ninterface NumberFormatterOptions {\n  /** 数字格式的样式 decimal:十进制, currency货币, percent百分比 */\n  style?: 'decimal' | 'currency' | 'percent'\n  /** 货币符号, 如果style为currency则默认CNY人民币 */\n  currency?: 'CNY' | 'USD' | 'JPY' | 'EUR'\n  /** 小数精度(小数点位数) */\n  precision?: number\n  /** 最大小数位数, 默认3 */\n  maximumFractionDigits?: number\n  /** 最小小数位数 */\n  minimumFractionDigits?: number\n  /** 表现方法, standard: 标准, scientific: 科学计数法, engineering: 引擎, compact: 简洁计数   */\n  notation?: Intl.NumberFormatOptions['notation']\n}\nn.formatter = function (options: NumberFormatterOptions) {\n  const formatter = new Intl.NumberFormat('zh-CN', {\n    notation: options.notation,\n    style: options.style,\n    maximumFractionDigits: options.maximumFractionDigits ?? options.precision,\n    minimumFractionDigits: options.minimumFractionDigits ?? options.precision,\n    currency:\n      options.style === 'currency'\n        ? options.currency ?? 'CNY'\n        : options.currency\n  })\n\n  return formatter\n}\n\n/**\n * 依次相加\n * @param numbers 数字\n * @returns\n */\nn.plus = function plus(...numbers: number[]) {\n  let i = 0\n  let result = 0\n  const { ints, factor } = int(numbers)\n  while (i < ints.length) {\n    result += ints[i]!\n    i++\n  }\n  return result / factor\n}\n\n/**\n * 依次相减\n * @param numbers 数字\n * @returns\n */\nn.minus = function minus(...numbers: number[]) {\n  let i = 0\n  let { ints, factor } = int(numbers)\n\n  let result = ints[0]!\n  ints = ints.slice(1)\n  while (i < ints.length) {\n    result -= ints[i]!\n    i++\n  }\n  return result / factor\n}\n\n/**\n * 两数相乘\n * @param num1 数字1\n * @param num2 数字2\n * @returns\n */\nn.mul = function mul(num1: number, num2: number) {\n  let {\n    ints: [int1, int2],\n    factor\n  } = int([num1, num2])\n  let result = int1! * int2!\n\n  return result / (factor * factor)\n}\n\n/**\n * 两数相除\n * @param num1 数字1\n * @param num2 数字2\n * @returns\n */\nn.div = function div(num1: number, num2: number) {\n  const { ints } = int([num1, num2])\n  return ints[0]! / ints[1]!\n}\n\nexport { n }\n", "import { isDate } from '../data/data-type'\n\ntype DateCompareReducer<R> = (year: number, month: number, day: number) => R\n\nclass Dater {\n  constructor(date: number | string | Date | Dater) {\n    if (date instanceof Dater) {\n      this.date = date.date\n    } else if (isDate(date)) {\n      this.date = date\n    } else {\n      this.date = new Date(date)\n    }\n  }\n\n  private date!: Date\n\n  /** 原始日期对象 */\n  get raw() {\n    return this.date\n  }\n\n  private static matchers: Record<\n    string,\n    (date: Dater, len: number) => string\n  > = {\n    yyyy: date => `${date.year}`,\n    YYYY: date => `${date.year}`,\n    'M+': (date, len: number) => {\n      let month = date.month + ''\n      return len === 1 ? month : `0${month}`.slice(-2)\n    },\n    'd+': (date, len: number) => {\n      let day = date.day + ''\n      return len === 1 ? day : `0${day}`.slice(-2)\n    },\n    'D+': (date, len: number) => {\n      let day = date.day + ''\n      return len === 1 ? day : `0${day}`.slice(-2)\n    },\n    'h+': (date, len: number) => {\n      let hour = date.hour\n      let strHour = (hour > 12 ? hour - 12 : hour) + ''\n      return len === 1 ? strHour : `0${strHour}`.slice(-2)\n    },\n    'H+': (date, len: number) => {\n      let Hour = `${date.hour}`\n      return len === 1 ? Hour : `0${Hour}`.slice(-2)\n    },\n    'm+': (date, len: number) => {\n      let mih = `${date.minute}`\n      return len === 1 ? mih : `0${mih}`.slice(-2)\n    },\n    's+': (date, len: number) => {\n      let sec = `${date.second}`\n      return len === 1 ? sec : `0${sec}`.slice(-2)\n    }\n  }\n\n  /** 时间戳 */\n  get timestamp() {\n    return this.date.getTime()\n  }\n\n  setTime(timestamp: number) {\n    this.date.setTime(timestamp)\n    return this\n  }\n\n  /** 年 */\n  get year() {\n    return this.date.getFullYear()\n  }\n\n  /**\n   * 设置年份\n   * @param year 年份\n   * @returns\n   */\n  setYear(year: number) {\n    this.date.setFullYear(year)\n    return this\n  }\n\n  /** 月 */\n  get month() {\n    return this.date.getMonth() + 1\n  }\n\n  /**\n   * 设置月份\n   * @param month 月份，从1开始\n   * @returns\n   */\n  setMonth(month: number) {\n    this.date.setMonth(month - 1)\n    return this\n  }\n\n  /** 周 */\n  get weekDay() {\n    return this.date.getDay()\n  }\n\n  /** 日 */\n  get day() {\n    return this.date.getDate()\n  }\n\n  setDay(day: number) {\n    this.date.setDate(day)\n    return this\n  }\n\n  /** 时 */\n  get hour(): number {\n    return this.date.getHours()\n  }\n  /** 时 */\n  get hours(): number {\n    return this.date.getHours()\n  }\n\n  /**\n   * 设置小时\n   * @param hours 时\n   * @returns\n   */\n  setHours(hours: number) {\n    this.date.setHours(hours)\n    return this\n  }\n\n  /** 分 */\n  get minute() {\n    return this.date.getMinutes()\n  }\n\n  /** 分 */\n  get minutes() {\n    return this.date.getMinutes()\n  }\n\n  /**\n   * 设置分\n   * @param minutes 分\n   */\n  setMinutes(minutes: number) {\n    this.date.setMinutes(minutes)\n  }\n\n  /** 秒 */\n  get second() {\n    return this.date.getSeconds()\n  }\n  /** 秒 */\n  get seconds() {\n    return this.date.getSeconds()\n  }\n\n  /**\n   * 设置秒\n   * @param sec 秒\n   */\n  setSeconds(sec: number) {\n    this.date.setSeconds(sec)\n  }\n\n  static setMatcher(\n    reg: string,\n    matcher: (date: Dater, len: number) => string\n  ) {\n    Dater.matchers[reg] = matcher\n  }\n\n  static use(plugin: (dater: typeof Dater) => void) {\n    plugin(Dater)\n  }\n\n  /** 获取所有的匹配器 */\n  static getMatchers() {\n    return Dater.matchers\n  }\n\n  /** 格式化日期 */\n  format(formatter = 'yyyy-MM-dd'): string {\n    Object.keys(Dater.matchers).forEach(reg => {\n      formatter = formatter.replace(new RegExp(`(${reg})`), str => {\n        return Dater.matchers[reg]!(this, str.length)\n      })\n    })\n    return formatter\n  }\n\n  /**\n   * 计算相对此刻的日期\n   * @param timeStep 计算的日期, 负数表示之前的日期, 正数表示之后的日期\n   * @param type 时间步长类别, 默认以天为单位\n   */\n  calc(timeStep: number, type?: 'days' | 'weeks' | 'months' | 'years'): Dater {\n    let { date } = this\n    if (type === 'days') {\n      return new Dater(this.timestamp + timeStep * 86400000)\n    } else if (type === 'weeks') {\n      return new Dater(this.timestamp + timeStep * 604800000)\n    } else if (type === 'months') {\n      date = new Date(date.getTime())\n      date.setMonth(timeStep + date.getMonth())\n      return new Dater(date)\n    } else {\n      date = new Date(date.getTime())\n      date.setFullYear(timeStep + date.getFullYear())\n      return new Dater(date)\n    }\n  }\n\n  /**\n   *\n   * @param date 日期\n   * @param reducer 处理器\n   * @returns\n   */\n  compare(date: string | Date | number | Dater): number\n  compare<R>(\n    date: string | Date | number | Dater,\n    reducer: DateCompareReducer<R>\n  ): R\n  compare(\n    date: string | Date | number | Dater,\n    reducer?: DateCompareReducer<any>\n  ) {\n    let dater = new Dater(date)\n\n    if (!reducer) {\n      return Math.ceil(Math.abs(this.timestamp - dater.timestamp) / 86400000)\n    }\n\n    const year = Math.abs(this.year - dater.year)\n    const month = Math.abs(this.month - dater.month)\n    const day = Math.abs(this.day - dater.day)\n\n    return reducer(year, month, day)\n  }\n\n  /**\n   * 跳转至月尾\n   * @param offsetMonth 月份偏移量，默认为0，即当月\n   */\n  toEndOfMonth(offsetMonth = 0) {\n    this.date.setMonth(this.month + offsetMonth)\n    this.date.setDate(0)\n\n    return this\n  }\n\n  /**\n   * 获取这个月的天数\n   */\n  getDays() {\n    const { timestamp } = this\n    const days = this.toEndOfMonth().day\n    this.setTime(timestamp)\n    return days\n  }\n}\n\ninterface DateFactory {\n  (date?: number | string | Date): Dater\n  /**\n   * 虽然可以直接操作Dater的api，但可以使用插件机制来更好的组织你的代码\n   * @param plugin 插件\n   */\n  use: (plugin: (dater: typeof Dater) => void) => void\n  /** 获取所有的匹配器 */\n  getMatchers: () => Record<string, (date: Dater, len: number) => string>\n  /**\n   * 设置匹配器，你可以新增或者覆盖原本的配器\n   * @param reg 匹配器名称\n   * @param matcher 匹配器\n   */\n  setMatcher: (\n    reg: string,\n    matcher: (date: Dater, len: number) => string\n  ) => void\n\n  /**\n   * 根据格式化日期字符串得到日期\n   * @param dateStr 格式化后的日期字符串\n   * @param formatter 格式化字符串\n   * @returns\n   */\n  from: (dateStr: string, formatter?: string) => Dater\n}\n\nexport const date = <DateFactory>function (date) {\n  return new Dater(date ?? new Date())\n}\n\ndate.use = Dater.use\n\ndate.getMatchers = Dater.getMatchers\n\ndate.setMatcher = Dater.setMatcher\n\nconst getDateTypeStr = (str: string, formatter: string, re: RegExp): string => {\n  let matched = formatter.match(re)\n\n  if (matched) {\n    return str.slice(matched.index!, matched.index! + matched[0].length)\n  }\n  return ''\n}\n\ndate.from = function (dateStr: string, formatter = 'yyyy-MM-dd') {\n  if (dateStr.length !== formatter.length) {\n    console.warn('dateStr与formatter的格式不一致')\n    return new Dater(dateStr)\n  }\n\n  // 年月日\n  const YMD = [/(y|Y)+/, /M+/, /d+/]\n    .map(re => getDateTypeStr(dateStr, formatter, re))\n    .filter(item => !!item)\n    .join('-')\n\n  // 时分秒\n  const HMS = [/(h|H)+/, /m+/, /s+/]\n    .map(re => getDateTypeStr(dateStr, formatter, re))\n    .filter(item => !!item)\n    .join(':')\n\n  dateStr = YMD + (HMS ? ` ${HMS}` : '')\n\n  return new Dater(dateStr)\n}\n\nexport type { Dater }\n", "/**\n * 深度优先遍历树结构，并对每个节点执行回调函数。\n * @param data - 树结构的根节点。\n * @param cb - 回调函数，接收当前节点作为参数，返回值为布尔值或无返回值, 当返回值为false时停止遍历。\n * @param childrenKey - 子节点的键名。\n * @returns 返回布尔值，表示是否遇到了回调函数返回 `false` 的节点。\n */\nexport function dft<T extends Record<string, any>>(\n  data: T,\n  cb: (item: T) => boolean | void,\n  childrenKey = 'children'\n): false | undefined {\n  if (cb(data) === false) return false\n\n  let children = data[childrenKey]\n  if (children) {\n    let i = 0\n    while (i < children.length) {\n      if (dft(children[i], cb, childrenKey) === false) break\n      i++\n    }\n  }\n}\n\n/**\n * 广度优先遍历树结构\n * @param root - 根节点\n * @param cb - 遍历回调函数，返回值为false时中断遍历\n * @param childrenKey - 子节点属性名，默认为'children'\n */\nexport function bft<T extends Record<string, any>>(\n  root: T,\n  cb: (item: T) => void | boolean,\n  childrenKey = 'children'\n): void {\n  let queue: T[] = []\n\n  queue.push(root)\n\n  while (queue.length > 0) {\n    const node = queue.shift()!\n    if (cb(node) === false) break\n\n    let children = node[childrenKey]\n    if (!!children) {\n      queue = queue.concat(children)\n    }\n  }\n}\n\n/**\n * 完全碾平\n * @param nodes 节点\n * @param childrenKey 子节点字段\n * @param result 一个用于递归传递的结果，99.9999%的情况不需要你去调用它\n * @returns\n */\nexport function flat<T extends Record<string, any>>(\n  nodes: T[],\n  childrenKey = 'children',\n  result: T[] = []\n): T[] {\n  nodes.forEach(node => {\n    result.push(node)\n    const children = node[childrenKey]\n    if (children) {\n      result.push(...flat(children, childrenKey, result))\n    }\n  })\n  return result\n}\n", "import { TreeNode } from './tree/tree-node'\nimport { bft, dft } from './tree/helper'\n\nexport interface TreeCreateByClassConfig<Node extends TreeNode> {\n  /**\n   * 子节点的键名\n   * @default 'children'\n   */\n  childrenKey?: string\n\n  /** 节点创建后的回调 */\n  onNodeCreated?: (node: Node) => void\n}\n\nexport interface TreeCreateByFunctionConfig<\n  Data extends any,\n  Node extends TreeNode\n> extends TreeCreateByClassConfig<Node> {\n  /** 节点创建方法 */\n  createNode: (data: Data, index: number) => Node\n}\n\nexport class Tree<Node extends TreeNode> {\n  readonly root: Node\n\n  /** 节点数量 */\n  get size(): number {\n    return this.root.size\n  }\n\n  constructor(root: Node) {\n    this.root = root\n  }\n\n  /**\n   * 生成树形结构数据\n   *\n   * @param data - 原始数据\n   * @param config - 配置项\n   * @returns 生成的树形结构数据\n   */\n  static create<Data extends Record<string, any>, Node extends TreeNode<Data>>(\n    data: Data,\n    config: TreeCreateByFunctionConfig<Data, Node>\n  ): Tree<Node>\n\n  /**\n   * 生成树形结构数据\n   *\n   * @param data - 原始数据\n   * @param Node - 节点类\n   * @param config - 配置项\n   * @returns 生成的树形结构数据\n   */\n  static create<Data extends Record<string, any>, Node extends TreeNode<Data>>(\n    data: Data,\n    Node: {\n      new (data: Data, index: number): Node\n    },\n    config: TreeCreateByClassConfig<Node>\n  ): Tree<Node>\n  static create<Data extends Record<string, any>, Node extends TreeNode<Data>>(\n    data: Data,\n    Node:\n      | {\n          new (data: Data, index: number): Node\n        }\n      | TreeCreateByFunctionConfig<Data, Node>,\n    config?: TreeCreateByClassConfig<Node>\n  ): Tree<Node> {\n    const { childrenKey = 'children', onNodeCreated } =\n      typeof Node === 'function' ? config || {} : Node\n\n    let createNode: (data: Data, index: number) => Node\n    if (typeof Node === 'function') {\n      createNode = (data, index) => new Node(data, index)\n    } else if (typeof Node === 'object') {\n      createNode = Node.createNode\n    }\n\n    function generate(data: any, index: number, parent?: any) {\n      const node = createNode(data, index)\n      onNodeCreated?.(node)\n      if (parent) {\n        node.parent = parent\n      }\n      const children = data[childrenKey]\n\n      if (children === undefined || Array.isArray(children)) {\n        node.children = children?.map((item, index) =>\n          generate(item, index, node)\n        )\n      }\n\n      return node\n    }\n\n    return new Tree(generate(data, 0))\n  }\n\n  /**\n   * 深度优先遍历树结构，并对每个节点执行回调函数。\n   * @param data - 树结构的根节点。\n   * @param cb - 回调函数，接收当前节点作为参数，返回值为布尔值或无返回值, 当返回值为false时停止遍历。\n   * @param childrenKey - 子节点的键名。\n   * @returns 返回布尔值，表示是否遇到了回调函数返回 `false` 的节点。\n   */\n  static dft = dft\n\n  /**\n   * 广度优先遍历树结构\n   * @param root - 根节点\n   * @param cb - 遍历回调函数，返回值为false时中断遍历\n   * @param childrenKey - 子节点属性名，默认为'children'\n   */\n  static bft = bft\n\n  /**\n   * 获取节点的子节点\n   * @param node 节点\n   * @param matcher 匹配函数，用于判断节点是否符合条件\n   * @param childrenKey 子节点键名，默认为'children'\n   * @returns 符合条件的子节点数组\n   */\n  static getChildren<Node extends Record<string, any>>(\n    node: Node,\n    matcher: (node: Node) => boolean,\n    childrenKey = 'children'\n  ): Node[] {\n    let ret: Node[] = []\n    Tree.dft(\n      node,\n      node => {\n        matcher(node) && ret.push(node)\n      },\n      childrenKey\n    )\n    return ret\n  }\n\n  /**\n   * 获取满足条件的第一个子节点。\n   *\n   * @param node - 父节点。\n   * @param matcher - 匹配子节点的条件。\n   * @param childrenKey - 访问父节点中子节点的键。\n   * @returns 第一个满足条件的子节点，如果没有匹配项则返回 null。\n   */\n  static getChild<Node extends Record<string, any>>(\n    node: Node,\n    matcher: (node: Node) => boolean,\n    childrenKey = 'children'\n  ): Node | null {\n    let ret: Node | null = null\n\n    Tree.bft(\n      node,\n      node => {\n        if (matcher(node)) {\n          ret = node\n          return false\n        }\n\n        return true\n      },\n      childrenKey\n    )\n    return ret\n  }\n\n  /**\n   * 通过索引路径访问子节点节点\n   * @param node 树形节点\n   * @param indexPath 索引路径。\n   * @param childrenKey 子节点key名\n   */\n  static visit(\n    node: Record<string, any>,\n    indexPath: number[],\n    childrenKey = 'children'\n  ) {\n    let result = node\n    for (let i = 0; i < indexPath.length; i++) {\n      const index = indexPath[i]!\n      if (!result) {\n        console.warn('访问的路径内容不存在')\n        return undefined\n      }\n      result = result[childrenKey]?.[index]\n    }\n    return result\n  }\n\n  /** 追加节点 */\n  append(data: Node['data']): void {\n    return this.root.append(data)\n  }\n\n  /**\n   * 广度优先遍历树结构，并对每个节点执行回调函数。\n   * @param cb - 回调函数，接收当前节点作为参数，返回值为布尔值或无返回值, 当返回值为false时停止遍历。\n   * @param childrenKey - 子节点的键名。\n   * @returns 返回布尔值，表示是否遇到了回调函数返回 `false` 的节点。\n   */\n  bft(cb: (item: Node) => boolean | void, childrenKey?: string): void {\n    return Tree.bft(this.root, cb, childrenKey)\n  }\n\n  /**\n   * 深度优先遍历树结构，并对每个节点执行回调函数。\n   * @param cb - 回调函数，接收当前节点作为参数，返回值为布尔值或无返回值, 当返回值为false时停止遍历。\n   * @param childrenKey - 子节点的键名。\n   * @returns 返回布尔值，表示是否遇到了回调函数返回 `false` 的节点。\n   */\n  dft(\n    cb: (node: Node) => boolean | void,\n    childrenKey?: string\n  ): false | undefined {\n    return Tree.dft(this.root, cb, childrenKey)\n  }\n}\n\nexport class Forest<Node extends TreeNode> {\n  private virtualRoot!: Node\n\n  get nodes(): Node[] {\n    return this.virtualRoot.children! as Node[]\n  }\n\n  /** 节点数量 */\n  get size(): number {\n    let sum = 0\n    this.nodes?.forEach(node => {\n      sum += node.size\n    })\n    return sum\n  }\n\n  constructor(node: Node) {\n    this.virtualRoot = node\n  }\n\n  /**\n   * 生成树形结构数据\n   *\n   * @param data - 原始数据\n   * @param config - 配置项\n   * @returns 生成的树形结构数据\n   */\n  static create<\n    Data extends Record<string, any>[],\n    Node extends TreeNode<Data[number]>\n  >(\n    data: Data,\n    config: TreeCreateByFunctionConfig<Data[number], Node>\n  ): Forest<Node>\n  /**\n   * 生成树形结构数据\n   *\n   * @param data - 原始数据\n   * @param Node - 节点类\n   * @param config - 配置项\n   * @returns 生成的树形结构数据\n   */\n  static create<\n    Data extends Record<string, any>[],\n    Node extends TreeNode<Data[number]>\n  >(\n    data: Data,\n    Node: {\n      new (data: Data[number], index: number): Node\n    },\n    config?: TreeCreateByClassConfig<Node>\n  ): Forest<Node>\n  static create<Data extends any[], Node extends TreeNode<Data[number]>>(\n    data: Data,\n    Node:\n      | {\n          new (data: Data[number], index: number): Node\n        }\n      | TreeCreateByFunctionConfig<Data[number], Node>,\n    config?: TreeCreateByClassConfig<Node>\n  ): Forest<Node> {\n    const { childrenKey = 'children', onNodeCreated } =\n      typeof Node === 'function' ? config || {} : Node\n\n    let createNode: (data: Data[number], index: number) => Node\n    if (typeof Node === 'function') {\n      createNode = (data, index) => new Node(data, index)\n    } else {\n      createNode = Node.createNode\n    }\n\n    function generate(data: any, index: number, parent?: any) {\n      const node = createNode(data, index)\n      onNodeCreated?.(node)\n      if (parent) {\n        node.parent = parent\n      }\n      const children = data[childrenKey]\n      if (Array.isArray(children) || children === undefined) {\n        node.children = children?.map((item, index) =>\n          generate(item, index, node)\n        )\n      }\n\n      return node\n    }\n\n    const virtualRoot = createNode(undefined, 0)\n    const nodes = data.map((item, index) => generate(item, index, virtualRoot))\n    virtualRoot.children = nodes\n    return new Forest(virtualRoot)\n  }\n\n  /**\n   * 通过索引路径访问子节点节点\n   * @param nodes 森林节点\n   * @param indexPath 索引路径。\n   * @param childrenKey 子节点key名\n   */\n  static visit(\n    nodes: Record<string, any>,\n    indexPath: number[],\n    childrenKey = 'children'\n  ) {\n    let currentNodes = nodes\n    let result: Record<string, any> | undefined\n    for (let i = 0; i < indexPath.length; i++) {\n      const index = indexPath[i]!\n      if (!currentNodes) {\n        return undefined\n      }\n      result = currentNodes[index]\n      currentNodes = result?.[childrenKey]\n    }\n    return result\n  }\n\n  /** 追加节点 */\n  append(data: Node['data']): void {\n    return this.virtualRoot.append(data)\n  }\n\n  /**\n   * 广度优先遍历树结构，并对每个节点执行回调函数。\n   * @param cb - 回调函数，接收当前节点作为参数，返回值为布尔值或无返回值, 当返回值为false时停止遍历。\n   * @param childrenKey - 子节点的键名。\n   * @returns 返回布尔值，表示是否遇到了回调函数返回 `false` 的节点。\n   */\n  bft(cb: (item: Node) => boolean | void, childrenKey = 'children'): void {\n    let queue = [...this.nodes]\n    while (queue.length) {\n      const node = queue.shift()!\n      const result = cb(node)\n      if (result === false) return\n      const children = node[childrenKey]\n      if (!!children) {\n        queue = queue.concat(children)\n      }\n    }\n  }\n\n  /**\n   * 深度优先遍历树结构，并对每个节点执行回调函数。\n   * @param cb - 回调函数，接收当前节点作为参数，返回值为布尔值或无返回值, 当返回值为false时停止遍历。\n   * @param childrenKey - 子节点的键名。\n   * @returns 返回布尔值，表示是否遇到了回调函数返回 `false` 的节点。\n   */\n  dft(\n    cb: (item: Node) => boolean | void,\n    childrenKey?: string\n  ): false | undefined {\n    let failed = false\n    this.nodes.forEach(node => {\n      const result = dft(node, cb, childrenKey)\n      if (result === false) {\n        failed = true\n      }\n    })\n    return failed ? false : undefined\n  }\n}\n\nexport { TreeNode }\n", "import { getDataType } from '../data/data-type'\n\nconst te = new TextEncoder()\nconst td = new TextDecoder()\n\nfunction encodeU8A(u8a: Uint8Array) {\n  const s = Array.prototype.slice\n    .call(u8a)\n    .map(code => String.fromCharCode(code))\n    .join('')\n  return btoa(s)\n}\n\nfunction encodeString(s: string) {\n  return encodeU8A(te.encode(s))\n}\n\n/**\n * base64编码\n * @param data 字符串或者数字类型数据\n */\nfunction encode(data: string | number): string\n/**\n * base64编码\n * @param data 文件类型数据\n */\nfunction encode(data: Blob): Promise<string>\nfunction encode(data: string | number | Blob): string | Promise<string> {\n  let type = getDataType(data)\n\n  if (type === 'string') {\n    return encodeString(data as string)\n  }\n  if (type === 'number') {\n    return encodeString(String(data))\n  }\n  if (data instanceof Blob) {\n    return data.arrayBuffer().then(buf => {\n      return encodeU8A(new Uint8Array(buf))\n    })\n  }\n  throw new Error('data类型错误')\n}\n\n/**\n * 解码\n * @param str base64字符串\n */\nfunction decode(str: string) {\n  const u8a = new Uint8Array(\n    atob(str)\n      .split('')\n      .map(s => s.charCodeAt(0))\n  )\n\n  return td.decode(u8a)\n}\n\nexport const base64 = {\n  /**\n   * base64编码\n   * @param data 输入数据\n   */\n  encode,\n\n  /**\n   * base64解码\n   * @param data 待解码base64字符串\n   */\n  decode\n}\n", "export interface AnimeConfig<State> {\n  /** 动画持续时间, 单位毫秒 */\n  duration?: number\n  /** 缓动函数 */\n  easingFunction?: (progress: number) => number\n  /** 动画完成后的回调 */\n  onComplete?(state: State): void\n}\n\nexport interface TweenConfig<State> {\n  /** 动画持续时间, 单位毫秒 */\n  duration?: number\n  /** 每一帧状态更新时的回调 */\n  onUpdate?(state: State): void\n  /** 动画完成后的回调 */\n  onComplete?(state: State): void\n  /** 缓动函数 */\n  easingFunction?: (progress: number) => number\n}\n\nexport class Tween<\n  State extends Record<string, number> = Record<string, number>\n> {\n  readonly state: State\n\n  protected duration = 300\n\n  protected onUpdate?: (state: State) => void\n  protected onComplete?: (state: State) => void\n\n  protected frameId?: number\n\n  protected easingFunction!: (progress: number) => number\n\n  // private elapsed = 0\n\n  private defaultState: State\n\n  constructor(state: State, config?: TweenConfig<State>) {\n    this.state = state\n    this.defaultState = { ...state }\n    const { duration, onUpdate, onComplete, easingFunction } = config || {}\n\n    if (duration !== undefined) {\n      this.duration = duration\n    }\n    if (onUpdate !== undefined) {\n      this.onUpdate = onUpdate\n    }\n    if (onComplete !== undefined) {\n      this.onComplete = onComplete\n    }\n    this.easingFunction = easingFunction || Tween.easing.linear\n  }\n\n  /** 请求动画帧 */\n  protected raf(options: {\n    onComplete: () => void\n    duration: number\n    tick: (p: number) => void\n  }) {\n    const start = performance.now()\n    const { onComplete, tick, duration } = options\n\n    const update = (timestamp: number) => {\n      // 经历的时间\n      const elapsed = timestamp - start\n\n      // 进度 = 时间 / 动画持续时间 且小于1\n      const progress = Math.min(elapsed / duration, 1)\n      tick(progress)\n      if (progress < 1) {\n        this.frameId = requestAnimationFrame(update)\n      } else {\n        tick(progress)\n        this.stop()\n        onComplete()\n      }\n    }\n\n    this.frameId = requestAnimationFrame(update)\n  }\n\n  /**\n   * 使用动画将组件状态转换为新状态。\n   * @param state 新的状态\n   * @param config 动画配置, 优先级高于Tween中的配置\n   */\n  to(state: State, config?: AnimeConfig<State>): void {\n    this.stop()\n\n    // 此前状态\n    const prevState = { ...this.state }\n\n    // 目标距离\n    const stateDistance = Object.keys(state).reduce(\n      (acc, key) => {\n        if (\n          (state[key] || state[key] === 0) &&\n          (prevState[key] || prevState[key] === 0)\n        ) {\n          acc[key] = state[key]! - prevState[key]!\n        }\n\n        return acc\n      },\n      {} as Record<string, number>\n    )\n\n    const duration = config?.duration || this.duration\n    const easingFunction = config?.easingFunction || this.easingFunction\n    const onComplete = config?.onComplete || this.onComplete\n\n    this.raf({\n      duration,\n      onComplete: () => {\n        for (const key in state) {\n          if (key in this.state) {\n            this.state[key] = state[key]\n          }\n        }\n        this.onUpdate?.(this.state)\n        onComplete?.(this.state)\n      },\n      tick: progress => {\n        for (const key in stateDistance) {\n          const target =\n            prevState[key]! + easingFunction(progress) * stateDistance[key]!\n          // @ts-ignore\n          this.state[key] = target\n        }\n\n        this.onUpdate?.(this.state)\n      }\n    })\n  }\n\n  back(config?: AnimeConfig<State>) {\n    this.to(this.defaultState, config)\n  }\n\n  /** 停止动画 */\n  private stop(): boolean {\n    if (!this.frameId) return false\n    cancelAnimationFrame(this.frameId)\n    this.frameId = undefined\n    return true\n  }\n\n  /** 暂停动画 */\n  // pause() {\n  //   this.stop()\n  // }\n\n  /** 继续 */\n  // resume() {}\n\n  static readonly easing = {\n    /** 匀速缓动 */\n    linear: (p: number) => p,\n    /** 先慢后快 */\n    easeInQuad: (p: number) => p * p,\n    /** 先快后慢 */\n    easeOutQuad: (p: number) => p * (2 - p),\n    /** 先慢后快再慢 */\n    easeInOutQuad: (p: number) => (p < 0.5 ? 2 * p * p : -1 + (4 - 2 * p) * p),\n    /** 先回弹再运动 */\n    easeInBack: (p: number) => p * p * ((2.70158 + 1) * p - 1),\n    /** 先运动再回弹 */\n    easeOutBack: (p: number) => {\n      return 1 + 2.70158 * Math.pow(p - 1, 3) + 1.70158 * Math.pow(p - 1, 2)\n    },\n    /** 先回弹再运动再回弹 */\n    easeInOutBack: (p: number) => {\n      const c1 = 1.70158\n      const c2 = c1 * 1.525\n\n      return p < 0.5\n        ? (Math.pow(2 * p, 2) * ((c2 + 1) * 2 * p - c2)) / 2\n        : (Math.pow(2 * p - 2, 2) * ((c2 + 1) * (p * 2 - 2) + c2) + 2) / 2\n    }\n  }\n}\n", "import { isObj } from './data-type'\n\ntype Last<T> = T extends [...any, infer L]\n  ? L\n  : T extends (infer P)[]\n    ? P\n    : undefined\n\n/**\n * 获取数组最后一位\n * @param arr 数组\n */\nexport function last<T extends any[]>(arr: [...T]): Last<T>\nexport function last<T extends any[]>(arr: readonly [...T]): Last<T>\nexport function last<T extends any[]>(arr: T): Last<T> {\n  return arr[arr.length - 1]\n}\n\n/**\n * 合并多个数组并去重\n * @param arrList 任意多个数组\n */\nexport function union<T>(...arrList: T[][]): T[] {\n  return Array.from(new Set<T>(arrList.flat()))\n}\n\n/**\n * 合并多个对象数组，并指定去重字段\n * @param key 按照这个字段进行去重\n * @param arrList 任意多个数组\n */\nexport function unionBy<T extends Record<string, any>>(\n  key: string,\n  ...arrList: T[][]\n): T[] {\n  let s = new Set<T>()\n\n  const ret = arrList.flat().filter(item => {\n    if (!isObj(item)) return true\n\n    let v = item[key]\n\n    if (s.has(v)) {\n      return false\n    } else {\n      s.add(v)\n      return true\n    }\n  })\n\n  s.clear()\n\n  return ret\n}\n\n/**\n * 数组从右到左的回调\n * @param arr 数组\n * @param cb 回调\n */\nexport function eachRight<T>(\n  arr: T[],\n  cb: (v: T, i: number, arr: T[]) => void\n) {\n  let len = arr.length\n\n  while (--len > -1) {\n    cb(arr[len]!, len, arr)\n  }\n}\n\n/**\n * 丢弃数组中指定的索引的元素\n * @param arr 数组\n * @param indexes 索引或者索引列表\n */\nexport function omitArr<T>(arr: T[], indexes: number | number[]): T[] {\n  if (Array.isArray(indexes)) {\n    if (indexes.length > 10) {\n      const s = new Set(indexes)\n      return arr.filter((_, index) => !s.has(index))\n    }\n\n    return arr.filter((_, index) => !indexes.includes(index))\n  }\n\n  if (typeof indexes === 'number') {\n    return [...arr.slice(0, indexes), ...arr.slice(indexes + 1)]\n  }\n\n  throw new Error('索引类型错误')\n}\n\nclass Arr<T> {\n  private _source: T[]\n  constructor(arr: T[]) {\n    this._source = arr\n  }\n\n  /**\n   * 从右往左遍历\n   * @param cb 回调\n   */\n  eachRight(cb: (v: T, i: number, arr: T[]) => void): void {\n    eachRight(this._source, cb)\n  }\n\n  /**\n   * 丢弃元素\n   * @param index 索引\n   * @returns\n   */\n  omit(index: number | number[]): T[] {\n    return omitArr(this._source, index)\n  }\n\n  /**\n   * 查询\n   * @param condition 查询条件\n   * @returns\n   */\n  find(condition: Record<string, any>): T | undefined {\n    return this._source.find(item =>\n      Object.keys(condition).every(key => item[key] === condition[key])\n    )\n  }\n\n  /** 最后一个元素 */\n  get last(): T | undefined {\n    return last(this._source)\n  }\n\n  /**\n   * 移动元素至某个新的位置\n   * @param from 原索引\n   * @param to 目标索引\n   * @returns\n   */\n  move(from: number, to: number): T[] {\n    const { _source } = this\n    let newItems: T[]\n    // 从前往后\n    if (to > from) {\n      newItems = [\n        ..._source.slice(0, from),\n        ..._source.slice(from + 1, to + 1),\n        _source[from]!,\n        ..._source.slice(to + 1)\n      ]\n    }\n    // 从后往前排\n    else {\n      newItems = [\n        ..._source.slice(0, to),\n        _source[from]!,\n        ..._source.slice(to, from),\n        ..._source.slice(from + 1)\n      ]\n    }\n    return newItems\n  }\n\n  /**\n   * 分组，返回一个对象，key为分组的值，value为分组的元素\n   * @param cb 分组回调, 返回值为分组的值\n   * @returns 分组后的对象\n   */\n  groupBy<K extends string | number>(cb: (item: T) => K) {\n    const result: Record<K, T[]> = {} as Record<K, T[]>\n    this._source.forEach(item => {\n      const key = cb(item)\n      if (!result[key]) {\n        result[key] = []\n      }\n      result[key]!.push(item)\n    })\n    return result\n  }\n}\n\nexport function arr<T>(arr: T[]) {\n  return new Arr(arr)\n}\n", "/**\n * 栈\n */\nexport class Stack<T> {\n  private items: T[]\n\n  private changeEvent?: (stack: Stack<T>) => void\n\n  constructor(initial?: T[]) {\n    this.items = initial || []\n  }\n\n  /**\n   * 入栈\n   * @param item 元素\n   */\n  push(item: T): void {\n    this.items.push(item)\n    this.emit()\n  }\n\n  /**\n   * 出栈\n   * @returns\n   */\n  pop(): T | undefined {\n    const item = this.items.pop()\n    this.emit()\n    return item\n  }\n\n  /**\n   * 栈顶\n   * @returns\n   */\n  peek(): T | undefined {\n    return this.items[this.items.length - 1]\n  }\n\n  /**\n   * 检查栈是否为空\n   * @returns\n   */\n  isEmpty(): boolean {\n    return this.items.length === 0\n  }\n\n  /**\n   * 栈的大小\n   * @returns\n   */\n\n  get size(): number {\n    return this.items.length\n  }\n\n  /**\n   * 清空栈\n   */\n  clear(): void {\n    this.items = []\n    this.emit()\n  }\n\n  private emit() {\n    this.changeEvent?.(this)\n  }\n\n  onChange(cb: (stack: Stack<T>) => void): void {\n    this.changeEvent = cb\n  }\n}\n", "import { omitArr } from '../../data/array'\nimport { bft, dft } from './helper'\n\ninterface TreeNodeCtor<Data> {\n  new (data: Data, index: number): any\n}\n\n/**\n * 树节点\n * @example 继承 TreeNode 示例\n * ```\n * class CustomTreeNode<Data extends Record<string, any>> extends TreeNode<Data> {\n *    override children?: CustomTreeNode<Data>[] = undefined\n *\n *    override parent: CustomTreeNode<Data> | null = null\n *\n *    expanded = true\n *\n *    constructor(data: Data, index: number, parent?: CustomTreeNode<Data>) {\n *      super(data, index)\n *\n *      if (parent) {\n *        this.parent = parent\n *      }\n *    }\n *  }\n * ```\n */\nexport abstract class TreeNode<\n  Data extends Record<string, any> = Record<string, any>\n> {\n  /** 节点数据 */\n  data: Data\n\n  /** 父节点 */\n  abstract parent: any\n\n  /** 子节点 */\n  abstract children?: any[]\n\n  /** 当前节点的索引 */\n  index: number\n\n  /** 树深 */\n  get depth(): number {\n    let depth = 0\n    let node: TreeNode<Data> = this\n    while (node?.parent) {\n      depth++\n      node = node.parent\n    }\n\n    return depth\n  }\n\n  /** 节点数量 */\n  get size(): number {\n    let s = 0\n    this.dft(() => {\n      s++\n    })\n    return s\n  }\n\n  /** 是否是叶子节点 */\n  get isLeaf(): boolean {\n    return !this.children || this.children.length === 0\n  }\n\n  constructor(data: Data, index: number) {\n    if (index < 0 || !Number.isInteger(index)) {\n      throw new Error(`节点的索引应当是正整数, 传入的索引为${index}`)\n    }\n    this.data = data\n    this.index = index\n  }\n\n  /**\n   * 从给定的起始索引开始，减小数组中元素的索引属性。\n   * @param arr - 需要重新排序的元素数组。\n   * @param startIndex - 开始重新排序的索引。\n   */\n  private static resort<Item extends { index: number }>(\n    arr: Item[],\n    startIndex: number\n  ) {\n    let i = 0\n    while (i < arr.length) {\n      arr[i]!.index = i + startIndex\n      i++\n    }\n  }\n\n  /**\n   * 深度优先遍历\n   * @param cb 递归回调\n   * @param childrenKey 子节点key\n   * @returns\n   */\n  dft(\n    cb: (item: this) => boolean | void,\n    childrenKey = 'children'\n  ): false | undefined {\n    return dft(this, cb, childrenKey)\n  }\n\n  /**\n   * 广度优先遍历\n   * @param cb 递归回调\n   * @param childrenKey 子节点key\n   * @returns\n   */\n  bft(cb: (item: this) => boolean | void, childrenKey = 'children') {\n    return bft(this, cb, childrenKey)\n  }\n\n  /**\n   * 从父节点中移除当前节点\n   * @returns 移除成功返回true，否则返回false\n   */\n  remove(): boolean {\n    if (!this.parent) {\n      return false\n    }\n    this.parent.removeChild(this)\n\n    return true\n  }\n\n  /**\n   * 从当前节点中移除子节点\n   * @param childNode 要移除的子节点\n   */\n  removeChild<Node extends TreeNode<any>>(childNode: Node) {\n    if (childNode.parent !== this || !this.children?.length) {\n      throw new Error('要移除的子节点不存在于当前节点中')\n    }\n\n    if (this.children?.[childNode.index] !== childNode) {\n      return\n    }\n\n    const result = omitArr(this.children!, childNode.index)\n\n    if (!result.length) {\n      this.children = undefined\n    } else {\n      TreeNode.resort(result.slice(childNode.index), childNode.index)\n      this.children = result\n    }\n  }\n\n  /**\n   * 在当前节点的子节点最后添加一个子节点。\n   * @param data 节点数据\n   */\n  append(data: Data): void {\n    const len = this.children?.length ?? 0\n    const node = new (this.constructor as TreeNodeCtor<Data>)(data, len)\n    node.parent = this\n    this.children = [...(this.children || []), node]\n  }\n\n  /**\n   * 插入节点到当前节点的子节点列表中。\n   * 如果节点的索引大于当前节点子节点的长度，抛出错误。\n   * 如果当前节点没有子节点，则将节点作为唯一子节点。\n   * 如果当前节点有子节点，则将节点插入到指定索引的位置，并重新排序子节点列表。\n   *\n   * @param data 要插入的节点的数据\n   * @param index 插入索引\n   */\n  insert(data: Data, index: number): void {\n    const { children } = this\n    const len = children?.length ?? 0\n    // 检查节点的索引是否有效\n    if (index > len) {\n      throw new Error(`节点的索引不能大于当前节点子节点的长度${len}`)\n    }\n\n    const node = new (this.constructor as TreeNodeCtor<Data>)(data, index)\n\n    // 指定父级\n    node.parent = this\n    if (!children) {\n      this.children = [node]\n    } else {\n      const pre = children!.slice(0, node.index)\n      const post = children!.slice(node.index)\n      TreeNode.resort(post, node.index + 1)\n\n      this.children = [...pre, node, ...post]\n    }\n  }\n\n  /**\n   * 在当前节点的下一个位置添加一个新节点。\n   * @param data 节点数据\n   */\n  addToNext(data: Data): void {\n    this.parent?.insert(data, this.index + 1)\n  }\n\n  /**\n   * 在当前节点的上一个位置添加一个新节点。\n   * @param data 节点数据\n   */\n  addToPrev(data: Data): void {\n    this.parent?.insert(data, this.index)\n  }\n}\n", "/**\n * 获取JS运行环境\n * @return 运行环境，如果 `window` 对象被定义（表示在浏览器中运行），则返回字符串字面量 `'web'`，\n * 否则返回字符串字面量 `'node'`（表示在 Node.js 环境中运行）。\n */\nexport function getRuntime(): 'web' | 'node' {\n  return typeof window !== 'undefined' ? 'web' : 'node'\n}\n\n/**\n * 获取设备类型\n * @returns 设备类型，可能为 'mobile' 或 'desktop'\n */\nexport function getDeviceType(): 'mobile' | 'desktop' {\n  const userAgent = navigator.userAgent.toLowerCase()\n  const mobileKeywords = [\n    'android',\n    'iphone',\n    'ipad',\n    'mobile',\n    'ipod',\n    'blackberry',\n    'windows phone'\n  ]\n\n  for (const keyword of mobileKeywords) {\n    if (userAgent.includes(keyword)) {\n      return 'mobile'\n    }\n  }\n\n  return 'desktop'\n}\n\ntype OSType = 'Windows' | 'Mac OS' | 'Linux' | 'Android' | 'iOS'\n\n/**\n * 获取操作系统类型\n * @returns 操作系统类型\n */\nexport function getOSType(): OSType | 'Unknown' {\n  const platform = navigator.platform\n\n  if (platform.includes('Win')) return 'Windows'\n  if (platform.includes('Mac')) return 'Mac OS'\n  if (platform.includes('Linux')) return 'Linux'\n  if (platform.includes('Android')) return 'Android'\n  if (platform.includes('iOS')) return 'iOS'\n  return 'Unknown'\n}\n", "/** 并发状态 */\nexport type ConcurrenceStatus =\n  | 'ready'\n  | 'running'\n  | 'success'\n  | 'failed'\n  | 'paused'\n\ntype SuccessCallback<Result> = (e: { result: Result[] }) => void\ntype CompleteCallback<Result> = (e: { result: Result[]; errors: any[] }) => void\ntype FailedCallback<Result> = (e: { result: Result[]; errors: any[] }) => void\ntype PauseCallback<Result> = (e: { result: Result[]; errors: any[] }) => void\ntype ContinueCallback<Result> = (e: { result: Result[]; errors: any[] }) => void\n\ntype EventsCallbacks<Result> = {\n  success?: SuccessCallback<Result>\n  complete?: CompleteCallback<Result>\n  failed?: FailedCallback<Result>\n  pause?: PauseCallback<Result>\n  continue?: ContinueCallback<Result>\n}\n\n/** 并发事件 */\nexport type ConcurrenceEvent = keyof EventsCallbacks<any>\n\ninterface ConcurrenceConfig<T, R> {\n  /**\n   * 并发模式。\n   * continue: 并发任务中有部分失败继续执行剩余任务;\n   * end: 并发任务中有1个失败立马结束所有并发\n   *\n   * @default 'end'\n   */\n  mode?: 'continue' | 'end'\n  /** 最大并发数量, 最小且默认为1 */\n  max?: number\n  /** 一个队列, 它的每一项会被传入action中执行组成并发操作 */\n  queue: T[]\n  /** 队列中每一项执行的异步方法 */\n  action: (item: T) => Promise<R>\n}\n\n/** 并发控制器 */\nexport class ConcurrenceController<Item = any, Result = any> {\n  /** 并发模式 */\n  private mode: 'continue' | 'end' = 'end'\n\n  /** 最大并发数量 */\n  private max = 1\n\n  /** 并发池, 异步action执行时进入, 执行完毕或者错误时退出 */\n  private pool = new Set<Promise<Result>>()\n\n  /** 所有队列 */\n  private queue: Item[] = []\n\n  /** 失败项 */\n  private failedItems: Item[] = []\n\n  /** 错误 */\n  private errors: any[] = []\n\n  /** 状态 */\n  protected status: ConcurrenceStatus = 'ready'\n\n  /** 事件回调 */\n  private eventsCallbacks: EventsCallbacks<Result> = {}\n\n  /** 结果 */\n  protected result: Result[] = []\n\n  /** 并发操作 */\n  private action!: (item: Item) => Promise<Result>\n\n  constructor(conf: ConcurrenceConfig<Item, Result>) {\n    const { mode, max, queue, action } = conf\n\n    if (mode) {\n      this.mode = mode\n    }\n    if (max) {\n      if (max < 1 || !Number.isInteger(max)) {\n        throw new Error('max参数应该是一个正整数')\n      }\n      this.max = max\n    }\n    this.queue = [...queue]\n    this.action = action\n  }\n\n  private ready() {\n    this.status = 'ready'\n  }\n\n  /**\n   * 是否完成, 并发池为空且队列为空或者状态已经为失败视为完成\n   */\n  private get finished() {\n    const { queue, pool, status } = this\n    return !pool.size && (!queue.length || status === 'failed')\n  }\n\n  /** 是否可新增 */\n  private get addable() {\n    const { status, queue } = this\n    return queue.length && status !== 'paused' && status !== 'failed'\n  }\n\n  private processingError(err: any, item: Item) {\n    const { errors, eventsCallbacks, mode, result, failedItems, pool } = this\n    errors.push(err)\n    failedItems.push(item)\n    if (mode === 'end') {\n      // 先标记失败\n      this.status = 'failed'\n\n      // 并发池中还有任务则返回\n      if (pool.size) return\n\n      eventsCallbacks.failed?.({\n        errors,\n        result\n      })\n      eventsCallbacks.complete?.({\n        errors,\n        result\n      })\n\n      return\n    }\n    if (mode === 'continue') {\n      this.add()\n      return\n    }\n  }\n\n  /** 完成此次并发 */\n  private finish() {\n    const { errors, result, eventsCallbacks } = this\n    if (errors.length) {\n      this.status = 'failed'\n      eventsCallbacks.failed?.({\n        result,\n        errors\n      })\n    } else {\n      this.status = 'success'\n      eventsCallbacks.success?.({\n        result\n      })\n    }\n\n    eventsCallbacks.complete?.({\n      result,\n      errors\n    })\n  }\n\n  /** 将操作加入并发池 */\n  private add() {\n    const { queue, action, pool, result, finished, addable } = this\n\n    // 操作都完成则退出\n    if (finished) {\n      return this.finish()\n    }\n\n    if (!addable) return\n\n    const item = queue.shift()!\n    const p = action!(item)\n\n    pool.add(p)\n\n    p.then(ret => {\n      pool.delete(p)\n      result.push(ret)\n      this.add()\n    }).catch(err => {\n      pool.delete(p)\n      this.processingError(err, item)\n    })\n  }\n\n  /**\n   * 监听并发成功事件\n   * @param event 成功事件\n   * @param successCallback 成功后的回调\n   */\n  on(event: 'success', successCallback: SuccessCallback<Result>): void\n  /**\n   * 监听并发失败事件\n   * @param event 失败事件\n   * @param failedCallback 失败后的回调\n   */\n  on(event: 'failed', failedCallback: FailedCallback<Result>): void\n  /**\n   * 监听并发完成事件, 完成事件无论失败还是成功都会触发\n   * @param event 完成事件\n   * @param completeCallback 完成后的回调\n   */\n  on(event: 'complete', completeCallback: CompleteCallback<Result>): void\n  /**\n   * 监听并发暂停事件\n   * @param event 暂停事件\n   * @param pauseCallback 暂停后的回调\n   */\n  on(event: 'pause', pauseCallback: PauseCallback<Result>): void\n  /**\n   * 监听并发继续事件\n   * @param event 继续事件\n   * @param continueCallback 继续后的回调\n   */\n  on(event: 'continue', continueCallback: ContinueCallback<Result>): void\n  on(event: ConcurrenceEvent, callback: (...args: any[]) => void): void {\n    this.eventsCallbacks[event] = callback\n  }\n\n  /** 开始并发 */\n  start() {\n    if (this.status !== 'ready') {\n      return console.warn(\n        `执行ConcurrenceController.start失败, 因为当前并发状态为${this.status}, 只有ready状态才能执行该方法`\n      )\n    }\n    this.status = 'running'\n    const { max, queue } = this\n    let i = -1\n    const len = Math.min(queue.length, max)\n\n    if (len) {\n      while (++i < len) this.add()\n    } else {\n      this.finish()\n    }\n  }\n\n  /** 暂停该并发中的任务 */\n  pause() {\n    this.status = 'paused'\n    const { eventsCallbacks, errors, result } = this\n    eventsCallbacks.pause?.({\n      errors,\n      result\n    })\n  }\n\n  /** 继续一个被暂停的并发 */\n  continue() {\n    // 设置ready状态以便于可以继续执行剩下的任务\n    this.ready()\n    const { eventsCallbacks, errors, result } = this\n    eventsCallbacks.continue?.({\n      errors,\n      result\n    })\n    this.start()\n  }\n\n  /** 重新尝试失败的任务 */\n  retry() {\n    if (!this.failedItems.length) {\n      return console.log(\n        `无法执行ConcurrenceController.retry方法, 因为没有失败的任务`\n      )\n    }\n\n    // 剩余队列加上失败项\n    this.queue = [...this.failedItems, ...this.queue]\n    this.errors = []\n    this.failedItems = []\n\n    this.ready()\n    this.start()\n  }\n}\n", "/**\n * 安全运行\n * @param task 待执行的任务\n */\nexport function safeRun<T>(task: () => T): T | undefined\n/**\n * 安全运行并提供默认返回值\n * @param task 待执行的任务\n * @param dft 指定的默认值\n */\nexport function safeRun<T>(task: () => T, dft: T): T\nexport function safeRun<T>(task: () => T, dft?: T): T | undefined {\n  try {\n    return task()\n  } catch {\n    return dft\n  }\n}", "/**\n * 防抖\n * @param fn 要调用的目标函数\n * @param delay 延迟时间\n * @param immediate 是否立即调用一次, 默认true\n * @returns\n */\nexport function debounce<T extends any[]>(\n  fn: (...args: T) => void,\n  delay = 300,\n  immediate = true\n) {\n  let timer: NodeJS.Timeout | undefined = undefined\n\n  return function (this: any, ...args: T) {\n    timer !== undefined && clearTimeout(timer)\n\n    if (immediate) {\n      // 空闲中\n      let isFree = timer === undefined\n      // 如果在开头已经调用则定时器中不再触发调用\n      let hasCall = false\n      if (isFree) {\n        fn.call(this, ...args)\n        hasCall = true\n      }\n      timer = setTimeout(() => {\n        timer = undefined\n        !hasCall && fn.call(this, ...args)\n      }, delay)\n    } else {\n      timer = setTimeout(() => {\n        fn.call(this, ...args)\n      }, delay)\n    }\n  }\n}\n\n/**\n * 节流\n * @param fn 要调用的目标函数\n * @param delay 间隔时间\n * @param cb 结果回调\n * @returns\n */\nexport function throttle<T extends any[], R>(\n  fn: (...args: T) => R,\n  delay = 300,\n  cb?: (v: R) => void\n) {\n  let start = Date.now()\n  let result: R\n  return function (this: any, ...args: T): R {\n    let current = Date.now()\n    if (current - start >= delay) {\n      start = current\n      result = fn.call(this, ...args)\n      cb?.(result)\n    }\n    return result\n  }\n}\n\n/**\n * 睡眠一定时间\n * @param ms 毫秒数\n * @returns\n */\nexport function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n", "export default {\n\n  /**\n   * 拼接路径\n   * @deprecated 这个方法已过时，请使用str.joinPath替代\n   * @param firstPath\n   * @param args\n   * @returns\n   */\n  join(firstPath: string, ...args: string[]) {\n    let left = /^\\/*/\n    let right = /\\/*$/\n    let protocolRE = /^(https?|ftp|file):/\n\n    let isProtocal = protocolRE.test(firstPath)\n\n    let prefix = isProtocal ? firstPath : ''\n    args = isProtocal ? args : [firstPath, ...args]\n    const joined = args.map((arg) => arg.replace(left, '').replace(right, '')).join('/')\n    return prefix.replace(right, '') + (joined.startsWith('/') ? joined : '/' + joined)\n  }\n}\n", "/**\n * 排除一个对象的某些键和值\n * @param target 目标对象\n * @param omitKeys 排除的对象的键的数组\n */\nexport function omit<T extends Record<string, any>, K extends keyof T>(\n  target: T,\n  omitKeys: K[]\n): Omit<T, K> {\n  let ret = {} as T\n  let s = new Set(omitKeys)\n  for (const key in target) {\n    if (!s.has(key as unknown as K)) {\n      ret[key] = target[key]\n    }\n  }\n  omitKeys.forEach(key => {\n    delete ret[key]\n  })\n  return ret\n}\n\n/**\n * 从目标对象获取某些属性的值\n * @param target 目标对象\n * @param pickKeys 选择的对象的键的数组\n */\nexport function pick<T extends Record<string, any>, K extends keyof T>(\n  target: T,\n  pickKeys: K[]\n): Pick<T, K> {\n  let ret = {} as T\n\n  pickKeys.forEach(key => (ret[key] = target[key]))\n  return ret\n}\n\n/**\n * 将对象的key设为数组\n * @param obj 对象\n * @returns\n */\nexport function objKeys<T extends Record<string, any>>(obj: T) {\n  let keys: Array<keyof T> = []\n  for (const key in obj) {\n    keys.push(key)\n  }\n  return keys\n}\n\n/**\n * 对象映射\n * @param obj 目标对象\n * @param mapper 映射函数\n * @returns\n */\nexport function objMap<O extends Record<string, any>, K extends keyof O, R>(\n  obj: O,\n  mapper: (val: O[K], key: K) => R\n) {\n  const ret: any = {}\n\n  Object.keys(obj).forEach(key => {\n    ret[key] = mapper(obj[key as K], key as K)\n  })\n  return ret as Record<K, R>\n}\n\n/**\n * 对象继承\n * @param source 源对象\n * @param targets 被继承的目标对象\n */\nexport function extend<S extends Record<string, any>>(\n  source: S,\n  ...targets: Record<string, any>[]\n) {\n  for (const key in source) {\n    let i = targets.length\n    while (--i >= 0) {\n      let v = targets[i]![key]\n      if (v !== undefined && v !== null) {\n        source[key] = v\n        break\n      }\n    }\n  }\n  return source\n}\n\n/**\n * 对象循环\n * @param obj 目标对象\n * @param fn 循环中调用的函数\n * @returns\n */\nexport function objEach<O extends Record<string, any>, K extends keyof O>(\n  obj: O,\n  fn: (val: O[K], key: K) => void\n) {\n  Object.keys(obj).forEach(key => {\n    fn(obj[key as K], key as K)\n  })\n}\n\nclass Obj<O extends Record<string, any>, K extends keyof O = keyof O> {\n  constructor(private _source: O) {}\n\n  /**\n   * 获取对象的key\n   * @returns\n   */\n  keys() {\n    return objKeys(this._source)\n  }\n\n  /**\n   * 获取某些属性的值\n   * @param pickKeys 选择的对象的键的数组\n   * @returns\n   */\n  pick<KK extends K>(pickKeys: KK[]): Pick<O, KK> {\n    return pick(this._source, pickKeys)\n  }\n\n  /**\n   * 循环\n   * @param fn 循环中调用的函数\n   * @returns\n   */\n  each(fn: (val: O[K], key: K) => void) {\n    objEach(this._source, fn)\n    return this\n  }\n\n  /**\n   * 排除一个对象的某些键和值\n   * @param omitKeys 排除的对象的键的数组\n   * @returns\n   */\n  omit<KK extends K>(omitKeys: KK[]): Omit<O, KK> {\n    return omit(this._source, omitKeys)\n  }\n\n  /**\n   * 对象映射\n   * @param mapper 映射函数\n   * @returns\n   */\n  map<R>(mapper: (val: O[K], key: K) => R) {\n    return objMap(this._source, mapper)\n  }\n\n  /**\n   * 对象继承\n   * @param targets 被继承的目标对象\n   * @returns\n   */\n  extend(...targets: Record<string, any>[]) {\n    extend(this._source, ...targets)\n    return this\n  }\n}\n\nexport function obj<O extends Record<string, any>>(o: O) {\n  return new Obj(o)\n}\n", "import { getDataType, isArray, isDate, isFunction, isObj } from './data-type'\nimport { objMap } from './object'\n\n/**\n * 返回一个值的空状态\n * @param val 任意值\n */\nexport function isEmpty(val: any) {\n  const type = getDataType(val)\n\n  switch (type) {\n    case 'array':\n      return val.length === 0\n    case 'object':\n      for (const _ in val) {\n        return false\n      }\n      return true\n  }\n  return !val\n}\n\n/**\n * 获取链式值\n * @param o 目标对象\n * @param prop 链式属性\n * @param targetProp 目标属性\n */\nexport function getChainValue(o: any, prop: string, targetProp?: string) {\n  let ret = o\n  if (targetProp) {\n    ret = o[targetProp]\n  }\n\n  prop &&\n    prop.split('.').some(p => {\n      if (p === '$last' && Array.isArray(ret)) {\n        ret = ret[ret.length - 1]\n      } else {\n        ret = ret[p]\n      }\n\n      if (!ret) {\n        return true\n      }\n    })\n  return ret\n}\n\n/**\n * 设置链式值\n * @param o 目标对象\n * @param prop 链式属性\n * @param value 值\n */\nexport function setChainValue(\n  o: Record<string, any>,\n  prop: string,\n  value: any\n) {\n  const props = prop.split('.')\n  let cur = o\n  let len = props.length - 1\n  for (let i = 0; i < len; i++) {\n    let p = props[i]\n    if (!cur[p]) {\n      cur[p] = {}\n    }\n    cur = cur[p]\n  }\n  cur[props[len]] = value\n  return o\n}\n\n/**\n * 是否为给定值中的一种\n * @param value 一个值\n * @param values 所有可能的值\n */\nexport function oneOf<K extends string | number>(value: K, values: K[]) {\n  return values.includes(value)\n}\n\n/**\n * 得到一个值的深拷贝版本\n * @param target 值\n */\nexport function deepCopy<T extends any>(this: any, target: T): any {\n  if (isArray(target)) {\n    return target.map(deepCopy)\n  }\n  if (isObj(target)) {\n    return objMap(target, deepCopy)\n  }\n  if (isFunction(target)) {\n    return new Function('return ' + (target as Function).toString()).call(this)\n  }\n  if (isDate(target)) {\n    return new Date((target as Date).valueOf()) as any\n  }\n  return target\n}\n\n/**\n * 判断两个值是否结构相等\n * @param v1 值1\n * @param v2 值2\n */\nexport function equal(v1: any, v2: any, byKey?: number | string) {\n  if (v1 === v2) return true\n  if (byKey !== undefined) {\n    return v1[byKey] === v2[byKey]\n  }\n  return JSON.stringify(v1) === JSON.stringify(v2)\n}\n\n/**\n * 合并对象并返回一个新的对象\n * @param args 参数列表\n */\nexport function merge(...args: Record<any, any>[]) {\n  if (args.length < 1) return undefined\n  if (args.length === 1) return deepCopy(args[0])\n\n  function mergeTwo(o1: any, o2: any) {\n    if (Array.isArray(o1)) {\n      // 先生成o1的映射表\n      return o1.concat(o2)\n    }\n\n    for (const key in o2) {\n      let v1 = o1[key]\n      let v2 = o2[key]\n      if (!v1) {\n        o1[key] = v2\n      } else {\n        let t1 = getDataType(v1)\n        let t2 = getDataType(v2)\n        if (t1 === t2) {\n          // 简单类型\n          if (oneOf(t1, ['string', 'number', 'null', 'boolean', 'undefined'])) {\n            o1[key] = v2\n          } else if (t1 === 'array' || t1 === 'object') {\n            o1[key] = mergeTwo(v1, v2)\n          }\n        } else {\n          o1[key] = v2\n        }\n      }\n    }\n\n    return o1\n  }\n\n  return args.reduce(\n    (acc, cur) => {\n      mergeTwo(acc, cur)\n      return acc\n    },\n    {} as Record<any, any>\n  )\n}\n\n/**\n * 序列化一个对象至 'key=value&key1=value1' 的形式\n * @param obj 被序列化的对象\n */\nexport function serialize(obj: Record<string, any>): string {\n  let ret = ''\n  try {\n    Object.keys(obj).forEach((key: string) => {\n      // 如果值为undefined或者null则在字符串中的表现形式就是空串\n      if ([undefined, null].includes(obj[key])) {\n        ret += `${key}=&`\n        return\n      }\n      ret += `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}&`\n    })\n    return ret.slice(0, -1)\n  } catch {\n    console.warn(\n      `期望传入一个object格式数据, 此处传入了一个${getDataType(obj)}格式的数据`\n    )\n    return ''\n  }\n}\n\n/**\n * 反序列化一个 'key=value&key1=value1' 形式的字符串\n * 需要用 decodeURIComponent 解码\n * 需要过滤所有的非正常字段\n * @param str 被序列化的对象\n */\nexport function deserialize<T extends Record<string, any>>(str: string): T {\n  return decodeURIComponent(str)\n    .split('&')\n    .reduce(\n      (acc, cur) => {\n        let [key, val] = cur.split('=')\n        if (val) {\n          try {\n            acc[key!] = JSON.parse(val)\n          } catch {\n            acc[key!] = val\n          }\n        } else {\n          acc[key!] = val\n        }\n        return acc\n      },\n      {} as Record<string, any>\n    ) as T\n}\n", "import { getDataType } from '@cat-kit/common'\n\ntype Callback<T = any> = (\n  key: CacheKey<T>,\n  value?: T,\n  temp?: { value: T; exp: number }\n) => void\n\nexport interface CacheKey<T> extends String {}\n\nexport function cacheKey<T>(str: string): CacheKey<T> {\n  return str\n}\n\nexport type ExtractCacheKey<T> = T extends CacheKey<infer K> ? K : never\nclass WebStorage {\n  #store: Storage\n\n  static enabledType: Set<string> = new Set([\n    'string',\n    'number',\n    'object',\n    'boolean',\n    'bigint'\n  ])\n\n  callbacks: { [key: string]: Callback[] } = {}\n\n  constructor(storageType: 'local' | 'session') {\n    if (storageType === 'local') {\n      this.#store = localStorage\n    } else {\n      this.#store = sessionStorage\n    }\n  }\n\n  /**\n   * 往缓存里添加单条记录\n   * @param key 单个值的键\n   * @param value 单个值\n   * @param exp 单个值的过期时间, 单位秒\n   */\n  set<T>(key: CacheKey<T>, value: T, exp = 0): WebStorage {\n    if (value === null) return this\n\n    const valueType = typeof value\n    if (!WebStorage.enabledType.has(valueType)) return this\n\n    // exp如果为0则永不过期\n    const temp: { value: any; exp: number } = { value: null, exp: 0 }\n\n    // 如果是简单的数据则直接存入\n    temp.value = value\n    temp.exp = exp ? Date.now() + exp * 1000 : 0\n\n    // 如果有绑定回调则此处出发回调\n    const cb = this.callbacks[key as string]\n    cb?.forEach(fn => fn(key, value, temp))\n\n    this.#store.setItem(key as string, JSON.stringify(temp))\n\n    return this\n  }\n\n  // 获取对应的字段\n  get<T>(key: CacheKey<T>): T | null\n  get<T>(key: CacheKey<T>, defaultValue: T): T\n  get<T extends [...any[]]>(\n    keys: [...T]\n  ): { [I in keyof T]: ExtractCacheKey<T[I]> }\n  get(key: any, defaultValue: any = null) {\n    let type = getDataType(key)\n    if (type === 'string') {\n      let stringTmp = this.#store.getItem(key as string)\n\n      // 如果未查到此项\n      if (stringTmp === null) return defaultValue\n\n      let tmp = JSON.parse(stringTmp)\n\n      // 如果未过期\n      if (tmp.exp > Date.now() || tmp.exp === 0) return tmp.value\n\n      // 数据过期\n      this.remove(key)\n      return defaultValue\n    }\n\n    if (type === 'array') {\n      return key.map((v: string) => this.get(v))\n    }\n\n    throw Error(\n      `get第一个参数的类型应该是string或者array, 但传入的值是${type}类型`\n    )\n  }\n\n  /**\n   * 获取字段过期时间\n   * @param key 字段名\n   */\n  getExpire(key: CacheKey<any>): number {\n    let stringTmp = this.#store.getItem(key as string)\n    // 如果未查到此项\n    if (stringTmp === null) return 0\n    try {\n      return JSON.parse(stringTmp).exp\n    } catch {\n      return 0\n    }\n  }\n\n  /**\n   * 移除一个缓存值\n   * @param key 需要移除的值的键\n   */\n  remove<T>(key: CacheKey<any>): WebStorage\n  /**\n   * 移除多个缓存值\n   * @param keys 需要移除的值的键的数组\n   */\n  remove(keys: CacheKey<any>[]): WebStorage\n  /**\n   * 清空缓存\n   */\n  remove(): WebStorage\n  remove(item?: any) {\n    if (item === undefined) {\n      this.#store.clear()\n    } else if (typeof item === 'string') {\n      this.#store.removeItem(item)\n    } else if (Array.isArray(item)) {\n      item.forEach(key => this.remove(key))\n    }\n    return this\n  }\n\n  /**\n   * 添加一个值改动的回调\n   * @param key 键\n   * @param callback 回调函数\n   */\n  on(key: string, callback: Callback): void {\n    const cbs = this.callbacks[key]\n\n    if (cbs) {\n      cbs.push(callback)\n    } else {\n      this.callbacks[key] = [callback]\n    }\n  }\n\n  /**\n   * 移除多个回调\n   * @param keys 需要移除的回调的字符串数组\n   */\n  off(keys: string[]): void\n  /**\n   * 移除单个回调\n   * @param key 需要移除的记录的键\n   */\n  off(key: string): void\n  /**\n   * 移除所有回调\n   */\n  off(): void\n  off(key?: any) {\n    if (typeof key === 'string') {\n      delete this.callbacks[key]\n    } else if (key === undefined) {\n      this.callbacks = {}\n    } else if (Array.isArray(key)) {\n      key.forEach((item: string) => this.off(item))\n    }\n  }\n}\n\nexport class WebCache {\n  static #local: WebStorage | null = null\n  static #session: WebStorage | null = null\n\n  static get session() {\n    if (WebCache.#session) {\n      return WebCache.#session\n    }\n    WebCache.#session = new WebStorage('session')\n    return WebCache.#session\n  }\n\n  static get local() {\n    if (WebCache.#local) {\n      return WebCache.#local\n    }\n    WebCache.#local = new WebStorage('local')\n    return WebCache.#local\n  }\n\n  static create(type: 'session' | 'local') {\n    return WebCache[type]\n  }\n}\n", "export class EmbeddedWorker<Ctx extends Record<string, any>> {\n  #worker?: Worker\n\n  #fnString = ''\n\n  #ctx?: Ctx\n\n  #scriptURL?: string\n\n  /**\n   * 嵌入式工作线程\n   * @param deps 依赖\n   */\n  constructor(deps?: {\n    /** 普通变量上下文 */\n    ctx?: Ctx\n    /**  fns 函数集合 */\n    fns?: Record<string, Function>\n  }) {\n    if (!deps) return\n    const { ctx, fns } = deps\n    this.#ctx = ctx\n\n    if (fns) {\n      this.#fnString = Object.entries(fns).reduce((acc, cur) => {\n        const [name, fn] = cur\n        return acc + `const ${name} = ${fn.toString()};`\n      }, '')\n    }\n  }\n\n  async run<R>(fn: (ctx: Ctx) => R) {\n    return new Promise<R>(rs => {\n      const scriptString = `\n      ${this.#fnString}\n      // 在这里执行fn代码\n      onmessage = async function (e) {\n       const result = await (${fn})(e.data)\n       postMessage(result)\n      }\n      `\n\n      const blob = new Blob([scriptString], {\n        type: 'text/javascript'\n      })\n      this.#scriptURL = URL.createObjectURL(blob)\n      this.#worker = new Worker(this.#scriptURL, {\n        type: 'module'\n      })\n      this.#worker.addEventListener('message', e => {\n        rs(e.data)\n      })\n\n      this.#worker.postMessage(this.#ctx)\n    })\n  }\n\n  terminate() {\n    this.#worker?.terminate()\n    URL.revokeObjectURL(this.#scriptURL!)\n  }\n}\n", "/** 命名前缀 */\r\nexport const NAME_SPACE = 'U'\r\n\r\n/** 类前缀 */\r\nexport const CLS_PREFIX = `${NAME_SPACE.toLowerCase()}-` as 'u-'\r\n\r\n/** 表单空内容 */\r\nexport const FORM_EMPTY_CONTENT = '-'\r\n", "/** BEM实例 */\r\nexport type BEM<\r\n  N extends string,\r\n  P extends string = string,\r\n  B extends string = `${P}${N}`\r\n> = {\r\n  /** BEM中的块 */\r\n  b: B\r\n\r\n  /**\r\n   * BEM中的元素(E)\r\n   * @param name 元素名称\r\n   * @returns\r\n   */\r\n  e<const E extends string>(name: E): `${B}__${E}`\r\n\r\n  /**\r\n   * 块和元素组合(B-E)\r\n   * @param block\r\n   * @param e\r\n   * @returns\r\n   */\r\n  be<const Block extends string, const E extends string>(\r\n    b: Block,\r\n    e: E\r\n  ): `${B}-${Block}__${E}`\r\n\r\n  /**\r\n   * BEM中的修饰符(M)\r\n   * @param m 修饰符名\r\n   * @returns 修饰符\r\n   */\r\n  m<const M extends string>(m: M): `${B}--${M}`\r\n\r\n  /**\r\n   * BEM中的元素与修饰符(E--M)\r\n   * @param e 元素名\r\n   * @param m 修饰符名\r\n   * @returns\r\n   */\r\n  em<const E extends string, const M extends string>(\r\n    e: E,\r\n    m: M\r\n  ): `${B}__${E}--${M}`\r\n}\r\n\r\n/** BEM工厂 */\r\nexport interface BEMFactory<Prefix extends string> {\r\n  <N extends string>(name: N): BEM<N, Prefix>\r\n  /**\r\n   * 生成is辅助类\r\n   * @param name 辅助类名称\r\n   */\r\n  is<const N extends string>(name: N): `is-${N}`\r\n  /**\r\n   * 生成is辅助类\r\n   * @param name 辅助类名称\r\n   * @param condition 辅助类显示条件\r\n   */\r\n  is<const N extends string, C extends boolean | undefined>(\r\n    name: N,\r\n    condition: C\r\n  ): C extends true ? `is-${N}` : ''\r\n}\r\n\r\n/**\r\n * 创建一个bem函数\r\n * @param prefix 前缀\r\n */\r\nexport function makeBEM<Prefix extends '' | `${string}-`>(\r\n  prefix: Prefix\r\n): BEMFactory<Prefix> {\r\n  /**\r\n   * css类命名辅助\r\n   * @param name 类block名称\r\n   */\r\n  function bem<N extends string>(name: N): BEM<N, Prefix> {\r\n    const b = `${prefix}${name}` as BEM<N, Prefix>['b']\r\n    return {\r\n      b,\r\n\r\n      e(name) {\r\n        return `${b}__${name}`\r\n      },\r\n\r\n      be(block, e) {\r\n        return `${b}-${block}__${e}`\r\n      },\r\n\r\n      m(m) {\r\n        return `${b}--${m}`\r\n      },\r\n\r\n      em(e, m) {\r\n        return `${b}__${e}--${m}`\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成is辅助类\r\n   * @param name 辅助类名称\r\n   */\r\n  function is<const N extends string>(name: N): `is-${N}`\r\n  /**\r\n   * 生成is辅助类\r\n   * @param name 辅助类名称\r\n   * @param condition 辅助类显示条件\r\n   */\r\n  function is<const N extends string, C extends boolean | undefined>(\r\n    name: N,\r\n    condition: C\r\n  ): C extends true ? `is-${N}` : ''\r\n\r\n  function is<N extends string>(name: N, condition?: boolean) {\r\n    if (arguments.length < 2) return `is-${name}`\r\n    return condition !== true ? '' : (`is-${name}` as const)\r\n  }\r\n\r\n  bem.is = is\r\n\r\n  return bem\r\n}\r\n", "import { CLS_PREFIX } from '@ui/shared'\r\nimport { makeBEM } from '../helper/make-bem'\r\n\r\nexport const bem = makeBEM(CLS_PREFIX)\r\n", "interface Options {\r\n  /** 触发元素 */\r\n  triggerEl: HTMLElement\r\n  /** 弹出元素 */\r\n  popupEl: HTMLElement\r\n  /** 间距 */\r\n  gap?: number\r\n}\r\n\r\nfunction getWindowScrollTop() {\r\n  let doc = document.documentElement\r\n  return (window.scrollY || doc.scrollTop) - (doc.clientTop || 0)\r\n}\r\n\r\nfunction getWindowScrollLeft() {\r\n  let doc = document.documentElement\r\n  return (window.scrollX || doc.scrollLeft) - (doc.clientLeft || 0)\r\n}\r\n\r\nfunction getViewport() {\r\n  let win = window,\r\n    d = document,\r\n    e = d.documentElement,\r\n    g = document.body,\r\n    w = win.innerWidth || e.clientWidth || g.clientWidth,\r\n    h = win.innerHeight || e.clientHeight || g.clientHeight\r\n\r\n  return { width: w, height: h }\r\n}\r\n\r\ninterface DropdownPosition {\r\n  top: string\r\n  left: string\r\n  width: string\r\n  transformOrigin: string\r\n}\r\n\r\n/**\r\n * 计算下拉框位置\r\n * @param options 选项\r\n * @returns\r\n */\r\nexport function computeDropdownPosition(options: Options): DropdownPosition {\r\n  const { triggerEl, popupEl, gap = 6 } = options\r\n\r\n  const triggerRect = triggerEl.getBoundingClientRect()\r\n\r\n  const windowScrollLeft = getWindowScrollLeft()\r\n  const windowScrollTop = getWindowScrollTop()\r\n  const viewport = getViewport()\r\n\r\n  let top = triggerRect.top + triggerEl.offsetHeight + windowScrollTop + gap\r\n  let left = triggerRect.left + windowScrollLeft\r\n\r\n  let transformOrigin: 'top' | 'bottom' = 'top'\r\n\r\n  if (top + popupEl.offsetHeight > window.innerHeight) {\r\n    top = triggerRect.top + windowScrollTop - popupEl.offsetHeight - gap\r\n    transformOrigin = 'bottom'\r\n  }\r\n\r\n  // 最小left为0\r\n  if (triggerRect.left + popupEl.offsetWidth > viewport.width) {\r\n    left = Math.max(\r\n      0,\r\n      triggerRect.left +\r\n        windowScrollLeft +\r\n        triggerEl.offsetWidth -\r\n        popupEl.offsetWidth\r\n    )\r\n  }\r\n\r\n  return {\r\n    top: top + 'px',\r\n    left: left + 'px',\r\n    width: triggerEl.offsetWidth + 'px',\r\n    transformOrigin\r\n  }\r\n}\r\n\r\n/**\r\n * 获取可滚动的父级\r\n * @param el 元素\r\n * @returns\r\n */\r\nexport function getScrollParents(el: HTMLElement): HTMLElement[] {\r\n  const parents: HTMLElement[] = []\r\n  let parent = el.parentElement\r\n  while (parent) {\r\n    if (parent.scrollHeight > parent.clientHeight) {\r\n      parents.push(parent)\r\n    }\r\n\r\n    parent = parent.parentElement\r\n  }\r\n  return parents\r\n}\r\n\r\nconst observerElMap = new Map<HTMLElement, Function>()\r\nconst observer = new ResizeObserver(entry => {\r\n  observerElMap.forEach(fn => fn())\r\n})\r\n\r\n/**\r\n * 监听元素尺寸\r\n * @param el 元素\r\n * @param cb 回调\r\n */\r\nexport function observeEl(el: HTMLElement, cb: () => void) {\r\n  observer.observe(el)\r\n  observerElMap.set(el, cb)\r\n}\r\n\r\n/**\r\n * 取消监听元素尺寸\r\n * @param el 元素\r\n */\r\nexport function unobserveEl(el: HTMLElement) {\r\n  observer.unobserve(el)\r\n  observerElMap.delete(el)\r\n}\r\n"],
  "mappings": ";AAqBO,SAAS,YAAY,OAAY;AAC/B,SAAA,OAAO,UAAU,SACrB,KAAK,KAAK,EACV,MAAM,GAAG,EAAE,EACX,YAAY;AACjB;AAMO,SAAS,MAAM,OAA0C;AACvD,SAAA,YAAY,KAAK,MAAM;AAChC;AAMO,SAAS,QAAQ,OAAiC;AAChD,SAAA,YAAY,KAAK,MAAM;AAChC;AA8BO,SAAS,OAAO,OAA2B;AACzC,SAAA,YAAY,KAAK,MAAM;AAChC;AAMO,SAAS,QAAQ,OAAgC;AACtD,SAAO,UAAU;AACnB;;;;;;;;AClFA,IAAA;AAMgB,SAAA,UACdA,MACA,OAA0B,SAClB;AACJA,MAAAA,KAAI,WAAW,EAAUA,QAAAA;AACzB,MAAA,YAAYA,KAAI,CAAC;AACrB,MAAI,SAAS,SAAS;AACpB,gBAAY,UAAU,YAAY;EAAA;AAEpC,SACE,YACAA,KAAI,UAAU,CAAC,EAAE,QAAQ,WAAW,CAAAC,OAAKA,GAAE,UAAU,CAAC,EAAE,YAAA,CAAa;AAEzE;AAMO,SAAS,UAAUD,MAAqB;AACzCA,MAAAA,KAAI,WAAW,GAAG,GAAG;AACvB,YAAQ,MAAM,aAAa;AACpBA,WAAAA;EAAA;AAEH,QAAA,MAAMA,KAAI,QAAQ,UAAU,CAAAC,OAAK,MAAMA,GAAE,YAAA,CAAa;AAC5D,SAAO,IAAI,WAAW,GAAG,IAAI,IAAI,UAAU,CAAC,IAAI;AAClD;AAEA,IAAM,MAAN,MAAU;EAGR,YAAYA,IAAW;AAFvB,iBAAA,MAAA,IAAA;AAGE,iBAAA,MAAK,MAAOA,EAAA;EAAA;;;;;;EAQd,UAAU,OAA0B,SAAiB;AAC5C,WAAA,UAAU,aAAK,MAAA,IAAA,GAAM,IAAI;EAAA;;;;;EAOlC,YAAoB;AACX,WAAA,UAAU,aAAA,MAAK,IAAI,CAAA;EAAA;AAE9B;AAtBE,OAAA,oBAAA,QAAA;AAwBK,SAAS,IAAID,MAAkB;AAC7B,SAAA,IAAI,IAAIA,IAAG;AACpB;AAeA,IAAI,WAAW,SAAS,SACtB,cACG,OACK;AACR,MAAI,aAAa,MACd,OAAO,CAAKE,OAAA,CAAC,CAACA,EAAC,EACf,KAAK,GAAG,EACR,QAAQ,WAAW,GAAG,EACtB,QAAQ,OAAO,EAAE;AAEpB,MAAI,YAAY;AACd,iBAAa,IAAI,UAAU;EAAA;AAGzB,MAAA,0BAA0B,KAAK,SAAS,GAAG;AAC7C,UAAM,SAAS,UAAU,QAAQ,SAAS,KAAK;AAC3C,QAAA,OAAO,SAAS,IAAI,KAAK,CAAC,OAAO,SAAS,GAAG,GAAG;AAClD,YAAM,IAAI,MAAM,UAAU,MAAM,EAAE;IAAA;AAEpC,WAAO,GAAG,OAAO,QAAQ,QAAQ,EAAE,CAAC,GAAG,UAAU;EAAA;AAGnD,SAAO,GAAG,UAAU,QAAQ,QAAQ,EAAE,CAAC,GAAG,UAAU;AACtD;;;;ACxFA,SAAS,IAAI,SAAmB;AAC9B,QAAM,gBAAgB,QAAQ,IAAI,CAAAC,OAAK,OAAOA,EAAC,CAAC;AAC1C,QAAA,gBAAgB,cAAc,IAAI,CAAM,OAAA;AFQzC;AERyC,qBAAG,MAAM,GAAG,EAAE,CAAC,MAAf,mBAAkB,WAAU;GAAC;AAErE,QAAA,SAAS,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,aAAa,CAAC;AAE/C,SAAA;;IAEL,MAAM,QAAQ,IAAI,CAAAA,OAAK,KAAK,MAAMA,KAAI,MAAM,CAAC;;IAE7C;EAAA;AAEJ;AASA,SAAS,iBACP,aACA,WACA,OACA;AACI,MAAA,YAAY,UAAU,WAAW;AAC5B,WAAA,YAAY,OAAO,WAAW,GAAG;EAAA;AAI1C,QAAM,aAAa,KAAK;IACtB,EAAE,YAAY,MAAM,GAAG,SAAS,IAAI,MAAM,YAAY,MAAM,SAAS;EAAA;AAEvE,QAAM,aAAa,aAAa,OAAO,UAAU,IAAI;AAEjD,MAAA,WAAW,WAAW,UAAkB,QAAA;AAGxC,MAAA,WAAW,SAAS,WAAW;AAC1B,WAAA,WAAW,SAAS,WAAW,GAAG;EAAA;AAGrC,QAAA;AACC,SAAA,IAAI,OAAO,SAAS;AAC7B;AAEA,SAAS,QACP,GACA,WACA;AACI,MAAA,CAACC,MAAK,UAAU,EAAE,IAAI,OAAO,CAAC,EAAE,MAAM,GAAG;AAE7C,MAAI,kBAAsC;AACtC,MAAA,OAAO,cAAc,UAAU;AACf,sBAAA;EAAA,OACb;AACC,UAAA,EAAE,cAAc,aAAA,IAAiB;AACvC,QAAI,iBAAiB,UAAa,QAAQ,SAAS,cAAc;AAC7C,wBAAA;IAAA,WACT,iBAAiB,UAAa,QAAQ,SAAS,cAAc;AACpD,wBAAA;IAAA;EACpB;AAEF,MACE,oBAAoB,UACpB,OAAO,UAAU,eAAe,KAChC,mBAAmB,GACnB;AACU,cAAA;MACR;MACA;MACA,MAAOA,OAAM,OAAO,CAACA,OAAM,CAAC;IAAA;EAC9B;AAGK,SAAA,UAAUA,OAAM,MAAM,UAAUA;AACzC;AAEA,IAAM,eAAe;AACrB,IAAM,gBAAgB,CAAC,IAAI,KAAK,KAAK,GAAG;AACxC,IAAM,eAAe,CAAC,IAAI,KAAK,KAAK,GAAG;AACvC,IAAM,eAAe,CAAC,KAAK,KAAK,KAAK,GAAG;AAExC,IAAM,qBAGF;EACF,IAAI,KAAK,QAAQ;AACf,UAAM,EAAE,WAAW,cAAc,aAAa,IAAI,UAAU,CAAA;AAE5D,UAAM,aAAa,MAAM;AACnB,UAAA,KAAK,IAAI,GAAG;AAEd,QAAA,CAAC,SAAS,cAAc,EAAE,IAAI,OAAO,GAAG,EAAE,MAAM,GAAG;AAKvD,QAAI,kBAAsC;AAC1C,QAAI,cAAc,QAAW;AACT,wBAAA;IAAA,WAElB,iBAAiB,UACjB,YAAY,SAAS,cACrB;AACkB,wBAAA;IAAA,WAElB,iBAAiB,UACjB,YAAY,SAAS,cACrB;AACkB,wBAAA;IAAA;AAGpB,QACE,oBAAoB,UACpB,OAAO,UAAU,eAAe,KAChC,mBAAmB,GACnB;AACc,oBAAA,iBAAiB,aAAa,iBAAiB,MAAM;AACvD,kBAAA,OAAO,CAAC,UAAU,CAAC;MAAA,CAC9B;IAAA;AAGH,QAAI,SAAS;AAEb,aAAS,IAAI,QAAQ,QAAQ,IAAI,GAAG,KAAK,GAAG;AACjC,eAAA,MAAM,QAAQ,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,CAAC,IAAI;IAAA;AAGlD,aAAA,OAAO,MAAM,CAAC;AAEvB,QAAI,YAAY;AACd,eAAS,MAAM;IAAA;AAGjB,QAAI,aAAa;AACf,eAAS,SAAS,MAAM;IAAA;AAGnB,WAAA;EAAA;EAET,QAAQ,KAAK,QAAQ;AACf,QAAA,CAAC,IAAY,QAAA;AACjB,QAAI,SAAS;AACT,QAAA,OAAO,KAA6B,QAAA;AAGxC,UAAM,aAAa,MAAM;AAErB,QAAA,CAAC,SAAS,OAAO,IAAI;MACvB;OACA,iCAAQ,eAAc,SAClB,OAAO,YAAY,IACjB,IACA,OAAO,YACT;IAAA,EACJ,MAAM,GAAG;AAEX,QAAI,YAAY;AACJ,gBAAA,QAAQ,MAAM,CAAC;IAAA;AAG3B,QAAI,QAAQ;AACZ,UAAM,SAAS,QAAS;AACxB,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,UAAID,KAAI,QAAS,UAAU,GAAG,IAAI,CAAC;AAC/B,UAAAD,KAAI,SAAS,IAAI;AACrB,UAAI,IAAIA,KAAI;AACZ,UAAI,IAAIA,KAAI;AACZ,UAAIC,OAAM,KAAK;AACb;MAAA,OACK;AACL,YAAI,QAAQ,GAAG;AACb,oBAAU,aAAa,CAAC;QAAA;AAElB,gBAAA;AACR,kBAAU,aAAa,SAASA,EAAC,CAAC,IAAK,cAAc,CAAC;MAAA;AAEpD,UAAA,MAAM,KAAK,QAAQ,GAAG;AACxB,kBAAU,aAAa,CAAC;MAAA;IAC1B;AAEF,aAAS,GAAG,MAAM;AAClB,QAAI,YAAY;AACd,eAAS,IAAI,MAAM;IAAA;AAGrB,QAAI,SAAS;AACX,YAAM,SAAS,QAAQ;AACvB,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,YAAIA,KAAI,QAAQ,UAAU,GAAG,IAAI,CAAC;AAC9BA,YAAAA,OAAM,IAAe,WAAA,aAAa,OAAOA,EAAC,CAAC,IAAK,aAAa,CAAC;MAAA;IACpE,OACK;AACL,eAAS,GAAG,MAAM;IAAA;AAEb,WAAA;EAAA;AAEX;AAEA,IAAM,MAAN,MAAU;EAGR,YAAYA,IAAW;AAFfE,oBAAA,MAAA,GAAA;AAGN,SAAK,IAAIF;EAAA;EAiBX,SACE,cACA,QACQ;AACJ,QAAA,OAAO,WAAW,UAAU;AACrB,eAAA;QACP,WAAW;MAAA;IACb;AAEF,WAAO,mBAAmB,YAAY,EAAE,KAAK,GAAG,MAAM;EAAA;;;;;EAOxD,MACE,WAQA;AACO,WAAA,QAAQ,KAAK,GAAG,SAAS;EAAA;;;;EAMlC,KAAK,IAAyB;AACtB,UAAA,EAAE,EAAA,IAAM;AACd,aAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,SAAG,CAAC;IAAA;EACN;;;;;;;EAQF,MAAM,KAAa,KAAqB;AACtC,QAAI,MAAM,KAAK;AACZ,OAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG;IAAA;AAErB,QAAA,KAAK,IAAI,IAAY,QAAA;AACrB,QAAA,KAAK,IAAI,IAAY,QAAA;AACzB,WAAO,KAAK;EAAA;;;;;;EAQd,IAAI,KAAa;AACX,QAAA,KAAK,IAAI,IAAY,QAAA;AACzB,WAAO,KAAK;EAAA;;;;;;EAQd,IAAI,KAAa;AACX,QAAA,KAAK,IAAI,IAAY,QAAA;AACzB,WAAO,KAAK;EAAA;AAEhB;AAMM,IAAA,IAAI,SAASA,GAAEA,IAAW;AACvB,SAAA,IAAI,IAAIA,EAAC;AAClB;AAOA,EAAE,MAAM,YAAa,SAAmB;AAC/B,SAAA,EAAE,KAAK,GAAG,OAAO;AAC1B;AAgBA,EAAE,YAAY,SAAU,SAAiC;AACvD,QAAM,YAAY,IAAI,KAAK,aAAa,SAAS;IAC/C,UAAU,QAAQ;IAClB,OAAO,QAAQ;IACf,uBAAuB,QAAQ,yBAAyB,QAAQ;IAChE,uBAAuB,QAAQ,yBAAyB,QAAQ;IAChE,UACE,QAAQ,UAAU,aACd,QAAQ,YAAY,QACpB,QAAQ;EAAA,CACf;AAEM,SAAA;AACT;AAOA,EAAE,OAAO,SAAS,QAAQ,SAAmB;AAC3C,MAAI,IAAI;AACR,MAAI,SAAS;AACb,QAAM,EAAE,MAAM,OAAO,IAAI,IAAI,OAAO;AAC7B,SAAA,IAAI,KAAK,QAAQ;AACtB,cAAU,KAAK,CAAC;AAChB;EAAA;AAEF,SAAO,SAAS;AAClB;AAOA,EAAE,QAAQ,SAAS,SAAS,SAAmB;AAC7C,MAAI,IAAI;AACR,MAAI,EAAE,MAAM,OAAO,IAAI,IAAI,OAAO;AAE9B,MAAA,SAAS,KAAK,CAAC;AACZ,SAAA,KAAK,MAAM,CAAC;AACZ,SAAA,IAAI,KAAK,QAAQ;AACtB,cAAU,KAAK,CAAC;AAChB;EAAA;AAEF,SAAO,SAAS;AAClB;AAQA,EAAE,MAAM,SAAS,IAAI,MAAc,MAAc;AAC3C,MAAA;IACF,MAAM,CAAC,MAAM,IAAI;IACjB;EAAA,IACE,IAAI,CAAC,MAAM,IAAI,CAAC;AACpB,MAAI,SAAS,OAAQ;AAErB,SAAO,UAAU,SAAS;AAC5B;AAQA,EAAE,MAAM,SAAS,IAAI,MAAc,MAAc;AAC/C,QAAM,EAAE,KAAK,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC;AACjC,SAAO,KAAK,CAAC,IAAK,KAAK,CAAC;AAC1B;;;;ACxZA,IAAM,SAAN,MAAMG,QAAM;EACV,YAAYC,OAAsC;AAU1CF,oBAAA,MAAA,MAAA;AATN,QAAIE,iBAAgBD,SAAO;AACzB,WAAK,OAAOC,MAAK;IAAA,WACR,OAAOA,KAAI,GAAG;AACvB,WAAK,OAAOA;IAAA,OACP;AACA,WAAA,OAAO,IAAI,KAAKA,KAAI;IAAA;EAC3B;;EAMF,IAAI,MAAM;AACR,WAAO,KAAK;EAAA;;EAyCd,IAAI,YAAY;AACP,WAAA,KAAK,KAAK,QAAQ;EAAA;EAG3B,QAAQ,WAAmB;AACpB,SAAA,KAAK,QAAQ,SAAS;AACpB,WAAA;EAAA;;EAIT,IAAI,OAAO;AACF,WAAA,KAAK,KAAK,YAAY;EAAA;;;;;;EAQ/B,QAAQ,MAAc;AACf,SAAA,KAAK,YAAY,IAAI;AACnB,WAAA;EAAA;;EAIT,IAAI,QAAQ;AACH,WAAA,KAAK,KAAK,SAAA,IAAa;EAAA;;;;;;EAQhC,SAAS,OAAe;AACjB,SAAA,KAAK,SAAS,QAAQ,CAAC;AACrB,WAAA;EAAA;;EAIT,IAAI,UAAU;AACL,WAAA,KAAK,KAAK,OAAO;EAAA;;EAI1B,IAAI,MAAM;AACD,WAAA,KAAK,KAAK,QAAQ;EAAA;EAG3B,OAAO,KAAa;AACb,SAAA,KAAK,QAAQ,GAAG;AACd,WAAA;EAAA;;EAIT,IAAI,OAAe;AACV,WAAA,KAAK,KAAK,SAAS;EAAA;;EAG5B,IAAI,QAAgB;AACX,WAAA,KAAK,KAAK,SAAS;EAAA;;;;;;EAQ5B,SAAS,OAAe;AACjB,SAAA,KAAK,SAAS,KAAK;AACjB,WAAA;EAAA;;EAIT,IAAI,SAAS;AACJ,WAAA,KAAK,KAAK,WAAW;EAAA;;EAI9B,IAAI,UAAU;AACL,WAAA,KAAK,KAAK,WAAW;EAAA;;;;;EAO9B,WAAW,SAAiB;AACrB,SAAA,KAAK,WAAW,OAAO;EAAA;;EAI9B,IAAI,SAAS;AACJ,WAAA,KAAK,KAAK,WAAW;EAAA;;EAG9B,IAAI,UAAU;AACL,WAAA,KAAK,KAAK,WAAW;EAAA;;;;;EAO9B,WAAW,KAAa;AACjB,SAAA,KAAK,WAAW,GAAG;EAAA;EAG1B,OAAO,WACL,KACA,SACA;AACM,IAAAD,QAAA,SAAS,GAAG,IAAI;EAAA;EAGxB,OAAO,IAAI,QAAuC;AAChD,WAAOA,OAAK;EAAA;;EAId,OAAO,cAAc;AACnB,WAAOA,QAAM;EAAA;;EAIf,OAAO,YAAY,cAAsB;AACvC,WAAO,KAAKA,QAAM,QAAQ,EAAE,QAAQ,CAAO,QAAA;AAC7B,kBAAA,UAAU,QAAQ,IAAI,OAAO,IAAI,GAAG,GAAG,GAAG,CAAON,SAAA;AAC3D,eAAOM,QAAM,SAAS,GAAG,EAAG,MAAMN,KAAI,MAAM;MAAA,CAC7C;IAAA,CACF;AACM,WAAA;EAAA;;;;;;EAQT,KAAK,UAAkB,MAAqD;AACtE,QAAA,EAAE,MAAAO,MAAAA,IAAS;AACf,QAAI,SAAS,QAAQ;AACnB,aAAO,IAAID,QAAM,KAAK,YAAY,WAAW,KAAQ;IAAA,WAC5C,SAAS,SAAS;AAC3B,aAAO,IAAIA,QAAM,KAAK,YAAY,WAAW,MAAS;IAAA,WAC7C,SAAS,UAAU;AAC5BC,cAAO,IAAI,KAAKA,MAAK,QAAA,CAAS;AAC9BA,YAAK,SAAS,WAAWA,MAAK,SAAA,CAAU;AACjC,aAAA,IAAID,QAAMC,KAAI;IAAA,OAChB;AACLA,cAAO,IAAI,KAAKA,MAAK,QAAA,CAAS;AAC9BA,YAAK,YAAY,WAAWA,MAAK,YAAA,CAAa;AACvC,aAAA,IAAID,QAAMC,KAAI;IAAA;EACvB;EAcF,QACEA,OACA,SACA;AACI,QAAA,QAAQ,IAAID,QAAMC,KAAI;AAE1B,QAAI,CAAC,SAAS;AACL,aAAA,KAAK,KAAK,KAAK,IAAI,KAAK,YAAY,MAAM,SAAS,IAAI,KAAQ;IAAA;AAGxE,UAAM,OAAO,KAAK,IAAI,KAAK,OAAO,MAAM,IAAI;AAC5C,UAAM,QAAQ,KAAK,IAAI,KAAK,QAAQ,MAAM,KAAK;AAC/C,UAAM,MAAM,KAAK,IAAI,KAAK,MAAM,MAAM,GAAG;AAElC,WAAA,QAAQ,MAAM,OAAO,GAAG;EAAA;;;;;EAOjC,aAAa,cAAc,GAAG;AAC5B,SAAK,KAAK,SAAS,KAAK,QAAQ,WAAW;AACtC,SAAA,KAAK,QAAQ,CAAC;AAEZ,WAAA;EAAA;;;;EAMT,UAAU;AACF,UAAA,EAAE,UAAA,IAAc;AAChB,UAAA,OAAO,KAAK,aAAA,EAAe;AACjC,SAAK,QAAQ,SAAS;AACf,WAAA;EAAA;AAEX;AAlPEF,gBAlBI,QAkBW,YAGX;EACF,MAAM,CAAAE,UAAQ,GAAGA,MAAK,IAAI;EAC1B,MAAM,CAAAA,UAAQ,GAAGA,MAAK,IAAI;EAC1B,MAAM,CAACA,OAAM,QAAgB;AACvB,QAAA,QAAQA,MAAK,QAAQ;AACzB,WAAO,QAAQ,IAAI,QAAQ,IAAI,KAAK,GAAG,MAAM,EAAE;EAAA;EAEjD,MAAM,CAACA,OAAM,QAAgB;AACvB,QAAA,MAAMA,MAAK,MAAM;AACrB,WAAO,QAAQ,IAAI,MAAM,IAAI,GAAG,GAAG,MAAM,EAAE;EAAA;EAE7C,MAAM,CAACA,OAAM,QAAgB;AACvB,QAAA,MAAMA,MAAK,MAAM;AACrB,WAAO,QAAQ,IAAI,MAAM,IAAI,GAAG,GAAG,MAAM,EAAE;EAAA;EAE7C,MAAM,CAACA,OAAM,QAAgB;AAC3B,QAAI,OAAOA,MAAK;AAChB,QAAI,WAAW,OAAO,KAAK,OAAO,KAAK,QAAQ;AAC/C,WAAO,QAAQ,IAAI,UAAU,IAAI,OAAO,GAAG,MAAM,EAAE;EAAA;EAErD,MAAM,CAACA,OAAM,QAAgB;AACvB,QAAA,OAAO,GAAGA,MAAK,IAAI;AACvB,WAAO,QAAQ,IAAI,OAAO,IAAI,IAAI,GAAG,MAAM,EAAE;EAAA;EAE/C,MAAM,CAACA,OAAM,QAAgB;AACvB,QAAA,MAAM,GAAGA,MAAK,MAAM;AACxB,WAAO,QAAQ,IAAI,MAAM,IAAI,GAAG,GAAG,MAAM,EAAE;EAAA;EAE7C,MAAM,CAACA,OAAM,QAAgB;AACvB,QAAA,MAAM,GAAGA,MAAK,MAAM;AACxB,WAAO,QAAQ,IAAI,MAAM,IAAI,GAAG,GAAG,MAAM,EAAE;EAAA;AAE/C,CAAA;AArDF,IAAM,QAAN;AAkSa,IAAA,OAAoB,SAAUA,OAAM;AAC/C,SAAO,IAAI,MAAMA,SAAQ,oBAAI,KAAA,CAAM;AACrC;AAEA,KAAK,MAAM,MAAM;AAEjB,KAAK,cAAc,MAAM;AAEzB,KAAK,aAAa,MAAM;AAExB,IAAM,iBAAiB,CAACP,MAAa,WAAmB,OAAuB;AACzE,MAAA,UAAU,UAAU,MAAM,EAAE;AAEhC,MAAI,SAAS;AACJ,WAAAA,KAAI,MAAM,QAAQ,OAAQ,QAAQ,QAAS,QAAQ,CAAC,EAAE,MAAM;EAAA;AAE9D,SAAA;AACT;AAEA,KAAK,OAAO,SAAU,SAAiB,YAAY,cAAc;AAC3D,MAAA,QAAQ,WAAW,UAAU,QAAQ;AACvC,YAAQ,KAAK,yBAAyB;AAC/B,WAAA,IAAI,MAAM,OAAO;EAAA;AAIpB,QAAA,MAAM,CAAC,UAAU,MAAM,IAAI,EAC9B,IAAI,CAAA,OAAM,eAAe,SAAS,WAAW,EAAE,CAAC,EAChD,OAAO,CAAA,SAAQ,CAAC,CAAC,IAAI,EACrB,KAAK,GAAG;AAGL,QAAA,MAAM,CAAC,UAAU,MAAM,IAAI,EAC9B,IAAI,CAAA,OAAM,eAAe,SAAS,WAAW,EAAE,CAAC,EAChD,OAAO,CAAA,SAAQ,CAAC,CAAC,IAAI,EACrB,KAAK,GAAG;AAEX,YAAU,OAAO,MAAM,IAAI,GAAG,KAAK;AAE5B,SAAA,IAAI,MAAM,OAAO;AAC1B;ACvUO,SAAS,IACd,MACA,IACA,cAAc,YACK;AACnB,MAAI,GAAG,IAAI,MAAM,MAAc,QAAA;AAE3B,MAAA,WAAW,KAAK,WAAW;AAC/B,MAAI,UAAU;AACZ,QAAI,IAAI;AACD,WAAA,IAAI,SAAS,QAAQ;AAC1B,UAAI,IAAI,SAAS,CAAC,GAAG,IAAI,WAAW,MAAM,MAAO;AACjD;IAAA;EACF;AAEJ;AAQO,SAAS,IACd,MACA,IACA,cAAc,YACR;AACN,MAAI,QAAa,CAAA;AAEjB,QAAM,KAAK,IAAI;AAER,SAAA,MAAM,SAAS,GAAG;AACjB,UAAA,OAAO,MAAM,MAAM;AACrB,QAAA,GAAG,IAAI,MAAM,MAAO;AAEpB,QAAA,WAAW,KAAK,WAAW;AAC3B,QAAA,CAAC,CAAC,UAAU;AACN,cAAA,MAAM,OAAO,QAAQ;IAAA;EAC/B;AAEJ;;;;AC1BO,IAAM,QAAN,MAAMQ,OAA4B;EAQvC,YAAY,MAAY;AAPfH,oBAAA,MAAA,MAAA;AAQP,SAAK,OAAO;EAAA;;EALd,IAAI,OAAe;AACjB,WAAO,KAAK,KAAK;EAAA;EAkCnB,OAAO,OACL,MACA,MAKA,QACY;AACN,UAAA,EAAE,cAAc,YAAY,cAAc,IAC9C,OAAO,SAAS,aAAa,UAAU,CAAA,IAAK;AAE1C,QAAA;AACA,QAAA,OAAO,SAAS,YAAY;AAC9B,mBAAa,CAACI,OAAM,UAAU,IAAI,KAAKA,OAAM,KAAK;IAAA,WACzC,OAAO,SAAS,UAAU;AACnC,mBAAa,KAAK;IAAA;AAGX,aAAA,SAASA,OAAW,OAAe,QAAc;AAClD,YAAA,OAAO,WAAWA,OAAM,KAAK;AACnC,qDAAgB;AAChB,UAAI,QAAQ;AACV,aAAK,SAAS;MAAA;AAEV,YAAA,WAAWA,MAAK,WAAW;AAEjC,UAAI,aAAa,UAAa,MAAM,QAAQ,QAAQ,GAAG;AACrD,aAAK,WAAW,qCAAU;UAAI,CAAC,MAAMC,WACnC,SAAS,MAAMA,QAAO,IAAI;;MAC5B;AAGK,aAAA;IAAA;AAGT,WAAO,IAAIF,OAAK,SAAS,MAAM,CAAC,CAAC;EAAA;;;;;;;;EA2BnC,OAAO,YACL,MACA,SACA,cAAc,YACN;AACR,QAAI,MAAc,CAAA;AACb,IAAAA,OAAA;MACH;MACA,CAAAG,UAAQ;AACN,gBAAQA,KAAI,KAAK,IAAI,KAAKA,KAAI;MAAA;MAEhC;IAAA;AAEK,WAAA;EAAA;;;;;;;;;EAWT,OAAO,SACL,MACA,SACA,cAAc,YACD;AACb,QAAI,MAAmB;AAElB,IAAAH,OAAA;MACH;MACA,CAAAG,UAAQ;AACF,YAAA,QAAQA,KAAI,GAAG;AACXA,gBAAAA;AACC,iBAAA;QAAA;AAGF,eAAA;MAAA;MAET;IAAA;AAEK,WAAA;EAAA;;;;;;;EAST,OAAO,MACL,MACA,WACA,cAAc,YACd;AL/JG;AKgKH,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACnC,YAAA,QAAQ,UAAU,CAAC;AACzB,UAAI,CAAC,QAAQ;AACX,gBAAQ,KAAK,YAAY;AAClB,eAAA;MAAA;AAEA,gBAAA,YAAO,WAAW,MAAlB,mBAAsB;IAAK;AAE/B,WAAA;EAAA;;EAIT,OAAO,MAA0B;AACxB,WAAA,KAAK,KAAK,OAAO,IAAI;EAAA;;;;;;;EAS9B,IAAI,IAAoC,aAA4B;AAClE,WAAOH,OAAK,IAAI,KAAK,MAAM,IAAI,WAAW;EAAA;;;;;;;EAS5C,IACE,IACA,aACmB;AACnB,WAAOA,OAAK,IAAI,KAAK,MAAM,IAAI,WAAW;EAAA;AAE9C;AAjHEH,gBArFW,OAqFJ,OAAM,GAAA;AAQbA,gBA7FW,OA6FJ,OAAM,GAAA;AA7FR,IAAM,OAAN;AAwMA,IAAM,SAAN,MAAM,QAA8B;EAgBzC,YAAY,MAAY;AAfhBA,oBAAA,MAAA,aAAA;AAgBN,SAAK,cAAc;EAAA;EAdrB,IAAI,QAAgB;AAClB,WAAO,KAAK,YAAY;EAAA;;EAI1B,IAAI,OAAe;ALjNd;AKkNH,QAAI,MAAM;AACL,eAAA,UAAA,mBAAO,QAAQ,CAAQ,SAAA;AAC1B,aAAO,KAAK;IAAA;AAEP,WAAA;EAAA;EAuCT,OAAO,OACL,MACA,MAKA,QACc;AACR,UAAA,EAAE,cAAc,YAAY,cAAc,IAC9C,OAAO,SAAS,aAAa,UAAU,CAAA,IAAK;AAE1C,QAAA;AACA,QAAA,OAAO,SAAS,YAAY;AAC9B,mBAAa,CAACI,OAAM,UAAU,IAAI,KAAKA,OAAM,KAAK;IAAA,OAC7C;AACL,mBAAa,KAAK;IAAA;AAGX,aAAA,SAASA,OAAW,OAAe,QAAc;AAClD,YAAA,OAAO,WAAWA,OAAM,KAAK;AACnC,qDAAgB;AAChB,UAAI,QAAQ;AACV,aAAK,SAAS;MAAA;AAEV,YAAA,WAAWA,MAAK,WAAW;AACjC,UAAI,MAAM,QAAQ,QAAQ,KAAK,aAAa,QAAW;AACrD,aAAK,WAAW,qCAAU;UAAI,CAAC,MAAMC,WACnC,SAAS,MAAMA,QAAO,IAAI;;MAC5B;AAGK,aAAA;IAAA;AAGH,UAAA,cAAc,WAAW,QAAW,CAAC;AACrC,UAAA,QAAQ,KAAK,IAAI,CAAC,MAAM,UAAU,SAAS,MAAM,OAAO,WAAW,CAAC;AAC1E,gBAAY,WAAW;AAChB,WAAA,IAAI,QAAO,WAAW;EAAA;;;;;;;EAS/B,OAAO,MACL,OACA,WACA,cAAc,YACd;AACA,QAAI,eAAe;AACf,QAAA;AACJ,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACnC,YAAA,QAAQ,UAAU,CAAC;AACzB,UAAI,CAAC,cAAc;AACV,eAAA;MAAA;AAET,eAAS,aAAa,KAAK;AAC3B,qBAAe,iCAAS;IAAW;AAE9B,WAAA;EAAA;;EAIT,OAAO,MAA0B;AACxB,WAAA,KAAK,YAAY,OAAO,IAAI;EAAA;;;;;;;EASrC,IAAI,IAAoC,cAAc,YAAkB;AACtE,QAAI,QAAQ,CAAC,GAAG,KAAK,KAAK;AAC1B,WAAO,MAAM,QAAQ;AACb,YAAA,OAAO,MAAM,MAAM;AACnB,YAAA,SAAS,GAAG,IAAI;AACtB,UAAI,WAAW,MAAO;AAChB,YAAA,WAAW,KAAK,WAAW;AAC7B,UAAA,CAAC,CAAC,UAAU;AACN,gBAAA,MAAM,OAAO,QAAQ;MAAA;IAC/B;EACF;;;;;;;EASF,IACE,IACA,aACmB;AACnB,QAAI,SAAS;AACR,SAAA,MAAM,QAAQ,CAAQ,SAAA;AACzB,YAAM,SAAS,IAAI,MAAM,IAAI,WAAW;AACxC,UAAI,WAAW,OAAO;AACX,iBAAA;MAAA;IACX,CACD;AACD,WAAO,SAAS,QAAQ;EAAA;AAE5B;AC5XA,IAAM,KAAK,IAAI,YAAY;AAC3B,IAAM,KAAK,IAAI,YAAY;;;;ACiBpB,IAAM,SAAN,MAAME,QAEX;EAgBA,YAAY,OAAc,QAA6B;AAf9C,kBAAA,MAAA,OAAA;AAET,kBAAA,MAAU,YAAW,GAAA;AAEX,kBAAA,MAAA,UAAA;AACA,kBAAA,MAAA,YAAA;AAEA,kBAAA,MAAA,SAAA;AAEA,kBAAA,MAAA,gBAAA;AAIF,kBAAA,MAAA,cAAA;AAGN,SAAK,QAAQ;AACR,SAAA,eAAe,EAAE,GAAG,MAAM;AAC/B,UAAM,EAAE,UAAU,UAAU,YAAY,eAAe,IAAI,UAAU,CAAA;AAErE,QAAI,aAAa,QAAW;AAC1B,WAAK,WAAW;IAAA;AAElB,QAAI,aAAa,QAAW;AAC1B,WAAK,WAAW;IAAA;AAElB,QAAI,eAAe,QAAW;AAC5B,WAAK,aAAa;IAAA;AAEf,SAAA,iBAAiB,kBAAkBA,QAAM,OAAO;EAAA;;EAI7C,IAAI,SAIX;AACK,UAAA,QAAQ,YAAY,IAAI;AAC9B,UAAM,EAAE,YAAY,MAAM,SAAA,IAAa;AAEjC,UAAA,SAAS,CAAC,cAAsB;AAEpC,YAAM,UAAU,YAAY;AAG5B,YAAM,WAAW,KAAK,IAAI,UAAU,UAAU,CAAC;AAC/C,WAAK,QAAQ;AACb,UAAI,WAAW,GAAG;AACX,aAAA,UAAU,sBAAsB,MAAM;MAAA,OACtC;AACL,aAAK,QAAQ;AACb,aAAK,KAAK;AACC,mBAAA;MAAA;IACb;AAGG,SAAA,UAAU,sBAAsB,MAAM;EAAA;;;;;;EAQ7C,GAAG,OAAc,QAAmC;AAClD,SAAK,KAAK;AAGV,UAAM,YAAY,EAAE,GAAG,KAAK,MAAM;AAGlC,UAAM,gBAAgB,OAAO,KAAK,KAAK,EAAE;MACvC,CAAC,KAAK,QAAQ;AACZ,aACG,MAAM,GAAG,KAAK,MAAM,GAAG,MAAM,OAC7B,UAAU,GAAG,KAAK,UAAU,GAAG,MAAM,IACtC;AACA,cAAI,GAAG,IAAI,MAAM,GAAG,IAAK,UAAU,GAAG;QAAA;AAGjC,eAAA;MAAA;MAET,CAAA;IAAC;AAGG,UAAA,YAAW,iCAAQ,aAAY,KAAK;AACpC,UAAA,kBAAiB,iCAAQ,mBAAkB,KAAK;AAChD,UAAA,cAAa,iCAAQ,eAAc,KAAK;AAE9C,SAAK,IAAI;MACP;MACA,YAAY,MAAM;AP9FjB;AO+FC,mBAAW,OAAO,OAAO;AACnB,cAAA,OAAO,KAAK,OAAO;AACrB,iBAAK,MAAM,GAAG,IAAI,MAAM,GAAG;UAAA;QAC7B;AAEG,mBAAA,aAAA,8BAAW,KAAK;AACrB,iDAAa,KAAK;MAAK;MAEzB,MAAM,CAAY,aAAA;APvGjB;AOwGC,mBAAW,OAAO,eAAe;AACzB,gBAAA,SACJ,UAAU,GAAG,IAAK,eAAe,QAAQ,IAAI,cAAc,GAAG;AAE3D,eAAA,MAAM,GAAG,IAAI;QAAA;AAGf,mBAAA,aAAA,8BAAW,KAAK;MAAK;IAC5B,CACD;EAAA;EAGH,KAAK,QAA6B;AAC3B,SAAA,GAAG,KAAK,cAAc,MAAM;EAAA;;EAI3B,OAAgB;AAClB,QAAA,CAAC,KAAK,QAAgB,QAAA;AAC1B,yBAAqB,KAAK,OAAO;AACjC,SAAK,UAAU;AACR,WAAA;EAAA;AAoCX;AAzBE,cAzIW,QAyIK,UAAS;;EAEvB,QAAQ,CAACC,OAAcA;;EAEvB,YAAY,CAACA,OAAcA,KAAIA;;EAE/B,aAAa,CAACA,OAAcA,MAAK,IAAIA;;EAErC,eAAe,CAACA,OAAeA,KAAI,MAAM,IAAIA,KAAIA,KAAI,MAAM,IAAI,IAAIA,MAAKA;;EAExE,YAAY,CAACA,OAAcA,KAAIA,OAAM,UAAU,KAAKA,KAAI;;EAExD,aAAa,CAACA,OAAc;AAC1B,WAAO,IAAI,UAAU,KAAK,IAAIA,KAAI,GAAG,CAAC,IAAI,UAAU,KAAK,IAAIA,KAAI,GAAG,CAAC;EAAA;;EAGvE,eAAe,CAACA,OAAc;AAC5B,UAAM,KAAK;AACX,UAAM,KAAK,KAAK;AAET,WAAAA,KAAI,MACN,KAAK,IAAI,IAAIA,IAAG,CAAC,MAAM,KAAK,KAAK,IAAIA,KAAI,MAAO,KAChD,KAAK,IAAI,IAAIA,KAAI,GAAG,CAAC,MAAM,KAAK,MAAMA,KAAI,IAAI,KAAK,MAAM,KAAK;EAAA;AAEvE,CAAA;AAjKK,IAAM,QAAN;;;ACNA,SAAS,KAAsBC,MAAiB;AAC9CA,SAAAA,KAAIA,KAAI,SAAS,CAAC;AAC3B;AA4DgB,SAAA,QAAWC,MAAU,SAAiC;AAChE,MAAA,MAAM,QAAQ,OAAO,GAAG;AACtB,QAAA,QAAQ,SAAS,IAAI;AACjB,YAAAC,KAAI,IAAI,IAAI,OAAO;AAClBD,aAAAA,KAAI,OAAO,CAAC,GAAG,UAAU,CAACC,GAAE,IAAI,KAAK,CAAC;IAAA;AAGxCD,WAAAA,KAAI,OAAO,CAAC,GAAG,UAAU,CAAC,QAAQ,SAAS,KAAK,CAAC;EAAA;AAGtD,MAAA,OAAO,YAAY,UAAU;AAC/B,WAAO,CAAC,GAAGA,KAAI,MAAM,GAAG,OAAO,GAAG,GAAGA,KAAI,MAAM,UAAU,CAAC,CAAC;EAAA;AAGvD,QAAA,IAAI,MAAM,QAAQ;AAC1B;;;;AE/DO,IAAe,WAAf,MAAe,UAEpB;EAuCA,YAAY,MAAY,OAAe;AArCvCE,IAAAA,iBAAA,MAAA,MAAA;AASAA,IAAAA,iBAAA,MAAA,OAAA;AA6BE,QAAI,QAAQ,KAAK,CAAC,OAAO,UAAU,KAAK,GAAG;AACzC,YAAM,IAAI,MAAM,sBAAsB,KAAK,EAAE;IAAA;AAE/C,SAAK,OAAO;AACZ,SAAK,QAAQ;EAAA;;EA9Bf,IAAI,QAAgB;AAClB,QAAI,QAAQ;AACZ,QAAI,OAAuB;AAC3B,WAAO,6BAAM,QAAQ;AACnB;AACA,aAAO,KAAK;IAAA;AAGP,WAAA;EAAA;;EAIT,IAAI,OAAe;AACjB,QAAIC,KAAI;AACR,SAAK,IAAI,MAAM;AACb,MAAAA;IAAA,CACD;AACM,WAAAA;EAAA;;EAIT,IAAI,SAAkB;AACpB,WAAO,CAAC,KAAK,YAAY,KAAK,SAAS,WAAW;EAAA;;;;;;EAgBpD,OAAe,OACbC,MACA,YACA;AACA,QAAI,IAAI;AACD,WAAA,IAAIA,KAAI,QAAQ;AACjB,MAAAA,KAAA,CAAC,EAAG,QAAQ,IAAI;AACpB;IAAA;EACF;;;;;;;EASF,IACE,IACA,cAAc,YACK;AACZ,WAAA,IAAI,MAAM,IAAI,WAAW;EAAA;;;;;;;EASlC,IAAI,IAAoC,cAAc,YAAY;AACzD,WAAA,IAAI,MAAM,IAAI,WAAW;EAAA;;;;;EAOlC,SAAkB;AACZ,QAAA,CAAC,KAAK,QAAQ;AACT,aAAA;IAAA;AAEJ,SAAA,OAAO,YAAY,IAAI;AAErB,WAAA;EAAA;;;;;EAOT,YAAwC,WAAiB;;AACvD,QAAI,UAAU,WAAW,QAAQ,GAAC,UAAK,aAAL,mBAAe,SAAQ;AACjD,YAAA,IAAI,MAAM,kBAAkB;IAAA;AAGpC,UAAI,UAAK,aAAL,mBAAgB,UAAU,YAAW,WAAW;AAClD;IAAA;AAGF,UAAM,SAAS,QAAQ,KAAK,UAAW,UAAU,KAAK;AAElD,QAAA,CAAC,OAAO,QAAQ;AAClB,WAAK,WAAW;IAAA,OACX;AACL,gBAAS,OAAO,OAAO,MAAM,UAAU,KAAK,GAAG,UAAU,KAAK;AAC9D,WAAK,WAAW;IAAA;EAClB;;;;;EAOF,OAAO,MAAkB;;AACjB,UAAA,QAAM,UAAK,aAAL,mBAAe,WAAU;AACrC,UAAM,OAAO,IAAK,KAAK,YAAmC,MAAM,GAAG;AACnE,SAAK,SAAS;AACd,SAAK,WAAW,CAAC,GAAI,KAAK,YAAY,CAAA,GAAK,IAAI;EAAA;;;;;;;;;;EAYjD,OAAO,MAAY,OAAqB;AAChC,UAAA,EAAE,SAAA,IAAa;AACf,UAAA,OAAM,qCAAU,WAAU;AAEhC,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,sBAAsB,GAAG,EAAE;IAAA;AAG7C,UAAM,OAAO,IAAK,KAAK,YAAmC,MAAM,KAAK;AAGrE,SAAK,SAAS;AACd,QAAI,CAAC,UAAU;AACR,WAAA,WAAW,CAAC,IAAI;IAAA,OAChB;AACL,YAAM,MAAM,SAAU,MAAM,GAAG,KAAK,KAAK;AACzC,YAAM,OAAO,SAAU,MAAM,KAAK,KAAK;AACvC,gBAAS,OAAO,MAAM,KAAK,QAAQ,CAAC;AAEpC,WAAK,WAAW,CAAC,GAAG,KAAK,MAAM,GAAG,IAAI;IAAA;EACxC;;;;;EAOF,UAAU,MAAkB;;AAC1B,eAAK,WAAL,mBAAa,OAAO,MAAM,KAAK,QAAQ;EAAC;;;;;EAO1C,UAAU,MAAkB;;AAC1B,eAAK,WAAL,mBAAa,OAAO,MAAM,KAAK;EAAK;AAExC;AGvMgB,SAAA,QAAW,MAAeC,MAAwB;AAC5D,MAAA;AACF,WAAO,KAAK;EAAA,QACN;AACC,WAAAA;EAAA;AAEX;ACVO,SAAS,SACd,IACA,QAAQ,KACR,YAAY,MACZ;AACA,MAAI,QAAoC;AAExC,SAAO,YAAwB,MAAS;AAC5B,cAAA,UAAa,aAAa,KAAK;AAEzC,QAAI,WAAW;AAEb,UAAI,SAAS,UAAU;AAEvB,UAAI,UAAU;AACd,UAAI,QAAQ;AACP,WAAA,KAAK,MAAM,GAAG,IAAI;AACX,kBAAA;MAAA;AAEZ,cAAQ,WAAW,MAAM;AACf,gBAAA;AACR,SAAC,WAAW,GAAG,KAAK,MAAM,GAAG,IAAI;MAAA,GAChC,KAAK;IAAA,OACH;AACL,cAAQ,WAAW,MAAM;AACpB,WAAA,KAAK,MAAM,GAAG,IAAI;MAAA,GACpB,KAAK;IAAA;EACV;AAEJ;;;AE/BgB,SAAA,KACd,QACA,UACY;AACZ,MAAI,MAAM,CAAA;AACN,MAAAC,KAAI,IAAI,IAAI,QAAQ;AACxB,aAAW,OAAO,QAAQ;AACxB,QAAI,CAACA,GAAE,IAAI,GAAmB,GAAG;AAC3B,UAAA,GAAG,IAAI,OAAO,GAAG;IAAA;EACvB;AAEF,WAAS,QAAQ,CAAO,QAAA;AACtB,WAAO,IAAI,GAAG;EAAA,CACf;AACM,SAAA;AACT;AAOgB,SAAA,KACd,QACA,UACY;AACZ,MAAI,MAAM,CAAA;AAEV,WAAS,QAAQ,CAAQ,QAAA,IAAI,GAAG,IAAI,OAAO,GAAG,CAAE;AACzC,SAAA;AACT;AAOO,SAAS,QAAuCC,MAAQ;AAC7D,MAAI,OAAuB,CAAA;AAC3B,aAAW,OAAOA,MAAK;AACrB,SAAK,KAAK,GAAG;EAAA;AAER,SAAA;AACT;AAQgB,SAAA,OACdA,MACA,QACA;AACA,QAAM,MAAW,CAAA;AAEjB,SAAO,KAAKA,IAAG,EAAE,QAAQ,CAAO,QAAA;AAC9B,QAAI,GAAG,IAAI,OAAOA,KAAI,GAAQ,GAAG,GAAQ;EAAA,CAC1C;AACM,SAAA;AACT;AAOgB,SAAA,OACd,WACG,SACH;AACA,aAAW,OAAO,QAAQ;AACxB,QAAI,IAAI,QAAQ;AACT,WAAA,EAAE,KAAK,GAAG;AACf,UAAI,IAAI,QAAQ,CAAC,EAAG,GAAG;AACnB,UAAA,MAAM,UAAa,MAAM,MAAM;AACjC,eAAO,GAAG,IAAI;AACd;MAAA;IACF;EACF;AAEK,SAAA;AACT;AAQgB,SAAA,QACdA,MACA,IACA;AACA,SAAO,KAAKA,IAAG,EAAE,QAAQ,CAAO,QAAA;AAC3BA,OAAAA,KAAI,GAAQ,GAAG,GAAQ;EAAA,CAC3B;AACH;AAEA,IAAM,MAAN,MAAsE;EACpE,YAAoB,SAAY;AAAZ,SAAA,UAAA;EAAA;;;;;EAMpB,OAAO;AACE,WAAA,QAAQ,KAAK,OAAO;EAAA;;;;;;EAQ7B,KAAmB,UAA6B;AACvC,WAAA,KAAK,KAAK,SAAS,QAAQ;EAAA;;;;;;EAQpC,KAAK,IAAiC;AAC5B,YAAA,KAAK,SAAS,EAAE;AACjB,WAAA;EAAA;;;;;;EAQT,KAAmB,UAA6B;AACvC,WAAA,KAAK,KAAK,SAAS,QAAQ;EAAA;;;;;;EAQpC,IAAO,QAAkC;AAChC,WAAA,OAAO,KAAK,SAAS,MAAM;EAAA;;;;;;EAQpC,UAAU,SAAgC;AACjC,WAAA,KAAK,SAAS,GAAG,OAAO;AACxB,WAAA;EAAA;AAEX;AAEO,SAAS,IAAmCC,IAAM;AAChD,SAAA,IAAI,IAAIA,EAAC;AAClB;AC1IgB,SAAA,cAAcC,IAAQ,MAAc,YAAqB;AACvE,MAAI,MAAMA;AACV,MAAI,YAAY;AACd,UAAMA,GAAE,UAAU;EAAA;AAGpB,UACE,KAAK,MAAM,GAAG,EAAE,KAAK,CAAKC,OAAA;AACxB,QAAIA,OAAM,WAAW,MAAM,QAAQ,GAAG,GAAG;AACjC,YAAA,IAAI,IAAI,SAAS,CAAC;IAAA,OACnB;AACL,YAAM,IAAIA,EAAC;IAAA;AAGb,QAAI,CAAC,KAAK;AACD,aAAA;IAAA;EACT,CACD;AACI,SAAA;AACT;AAQgB,SAAA,cACdD,IACA,MACA,OACA;AACM,QAAA,QAAQ,KAAK,MAAM,GAAG;AAC5B,MAAI,MAAMA;AACN,MAAA,MAAM,MAAM,SAAS;AACzB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,QAAAC,KAAI,MAAM,CAAC;AACX,QAAA,CAAC,IAAIA,EAAC,GAAG;AACP,UAAAA,EAAC,IAAI,CAAA;IAAC;AAEZ,UAAM,IAAIA,EAAC;EAAA;AAET,MAAA,MAAM,GAAG,CAAC,IAAI;AACX,SAAAD;AACT;AAoCgB,SAAA,MAAM,IAAS,IAAS,OAAyB;AAC3D,MAAA,OAAO,GAAW,QAAA;AACtB,MAAI,UAAU,QAAW;AACvB,WAAO,GAAG,KAAK,MAAM,GAAG,KAAK;EAAA;AAE/B,SAAO,KAAK,UAAU,EAAE,MAAM,KAAK,UAAU,EAAE;AACjD;;;;;;;;;;;;;AClHA,IAAA;AAAA,IAAA;AAAA,IAAA;AAeA,IAAM,cAAN,MAAME,aAAW;EAaf,YAAY,aAAkC;AAZ9C,IAAAC,cAAA,MAAA,MAAA;AAUA,IAAAC,eAAA,MAAA,aAA2C,CAAA,CAAC;AAG1C,QAAI,gBAAgB,SAAS;AAC3B,MAAAC,cAAA,MAAK,QAAS,YAAA;IAAA,OACT;AACL,MAAAA,cAAA,MAAK,QAAS,cAAA;IAAA;EAChB;;;;;;;EASF,IAAO,KAAkB,OAAU,MAAM,GAAe;AAClD,QAAA,UAAU,KAAa,QAAA;AAE3B,UAAM,YAAY,OAAO;AACzB,QAAI,CAACH,aAAW,YAAY,IAAI,SAAS,EAAU,QAAA;AAGnD,UAAM,OAAoC,EAAE,OAAO,MAAM,KAAK,EAAE;AAGhE,SAAK,QAAQ;AACb,SAAK,MAAM,MAAM,KAAK,IAAI,IAAI,MAAM,MAAO;AAGrC,UAAA,KAAK,KAAK,UAAU,GAAa;AACvC,6BAAI,QAAQ,CAAM,OAAA,GAAG,KAAK,OAAO,IAAI;AAErC,IAAAI,cAAA,MAAK,MAAA,EAAO,QAAQ,KAAe,KAAK,UAAU,IAAI,CAAC;AAEhD,WAAA;EAAA;EAST,IAAI,KAAU,eAAoB,MAAM;AAClC,QAAA,OAAO,YAAY,GAAG;AAC1B,QAAI,SAAS,UAAU;AACrB,UAAI,YAAYA,cAAA,MAAK,MAAO,EAAA,QAAQ,GAAa;AAG7C,UAAA,cAAc,KAAa,QAAA;AAE3B,UAAA,MAAM,KAAK,MAAM,SAAS;AAG1B,UAAA,IAAI,MAAM,KAAK,IAAA,KAAS,IAAI,QAAQ,EAAG,QAAO,IAAI;AAGtD,WAAK,OAAO,GAAG;AACR,aAAA;IAAA;AAGT,QAAI,SAAS,SAAS;AACpB,aAAO,IAAI,IAAI,CAAC,MAAc,KAAK,IAAI,CAAC,CAAC;IAAA;AAGrC,UAAA;MACJ,sCAAsC,IAAI;IAAA;EAC5C;;;;;EAOF,UAAU,KAA4B;AACpC,QAAI,YAAYA,cAAA,MAAK,MAAO,EAAA,QAAQ,GAAa;AAE7C,QAAA,cAAc,KAAa,QAAA;AAC3B,QAAA;AACK,aAAA,KAAK,MAAM,SAAS,EAAE;IAAA,QACvB;AACC,aAAA;IAAA;EACT;EAiBF,OAAO,MAAY;AACjB,QAAI,SAAS,QAAW;AACtB,MAAAA,cAAA,MAAK,MAAA,EAAO,MAAM;IAAA,WACT,OAAO,SAAS,UAAU;AAC9B,MAAAA,cAAA,MAAA,MAAA,EAAO,WAAW,IAAI;IAAA,WAClB,MAAM,QAAQ,IAAI,GAAG;AAC9B,WAAK,QAAQ,CAAA,QAAO,KAAK,OAAO,GAAG,CAAC;IAAA;AAE/B,WAAA;EAAA;;;;;;EAQT,GAAG,KAAa,UAA0B;AAClC,UAAA,MAAM,KAAK,UAAU,GAAG;AAE9B,QAAI,KAAK;AACP,UAAI,KAAK,QAAQ;IAAA,OACZ;AACL,WAAK,UAAU,GAAG,IAAI,CAAC,QAAQ;IAAA;EACjC;EAiBF,IAAI,KAAW;AACT,QAAA,OAAO,QAAQ,UAAU;AACpB,aAAA,KAAK,UAAU,GAAG;IAAA,WAChB,QAAQ,QAAW;AAC5B,WAAK,YAAY,CAAA;IAAC,WACT,MAAM,QAAQ,GAAG,GAAG;AAC7B,UAAI,QAAQ,CAAC,SAAiB,KAAK,IAAI,IAAI,CAAC;IAAA;EAC9C;AAEJ;AA/JE,SAAA,oBAAA,QAAA;AAEAF,eAHI,aAGG,eAA2B,oBAAI,IAAI;EACxC;EACA;EACA;EACA;EACA;AACF,CAAC,CAAA;AATH,IAAM,aAAN;AAkKO,IAAM,YAAN,MAAMG,WAAS;EAIpB,WAAW,UAAU;AACnB,QAAID,cAAAC,YAAS,QAAU,GAAA;AACrB,aAAOD,cAASC,YAAA,QAAA;IAAA;AAET,IAAAF,cAAAE,YAAA,UAAW,IAAI,WAAW,SAAS,CAAA;AAC5C,WAAOD,cAASC,YAAA,QAAA;EAAA;EAGlB,WAAW,QAAQ;AACjB,QAAID,cAAAC,YAAS,MAAQ,GAAA;AACnB,aAAOD,cAASC,YAAA,MAAA;IAAA;AAET,IAAAF,cAAAE,YAAA,QAAS,IAAI,WAAW,OAAO,CAAA;AACxC,WAAOD,cAASC,YAAA,MAAA;EAAA;EAGlB,OAAO,OAAO,MAA2B;AACvC,WAAOA,WAAS,IAAI;EAAA;AAExB;AAtBS,SAAA,oBAAA,QAAA;AACA,WAAA,oBAAA,QAAA;AADPJ,cADW,WACJ,QAA4B,IAAA;AACnCA,cAFW,WAEJ,UAA8B,IAAA;;;ACnLvC,IAAA;AAAA,IAAA;AAAA,IAAA;AAAA,IAAA;AACE,UAAA,oBAAA,QAAA;AAEA,YAAA,oBAAA,QAAA;AAEA,OAAA,oBAAA,QAAA;AAEA,aAAA,oBAAA,QAAA;;;ACNK,IAAMK,IAAa;AAAnB,IAGMC,IAAa,GAAGD,EAAW,YAAA,CAAa;AAH9C,IAMME,IAAqB;;;AC8D3B,SAASC,EACdC,GACoB;AAKpB,WAASC,EAAsBC,IAAyB;AACtD,UAAMC,IAAI,GAAGH,CAAM,GAAGE,EAAI;AACnB,WAAA;MACL,GAAAC;MAEA,EAAED,IAAM;AACC,eAAA,GAAGC,CAAC,KAAKD,EAAI;MACtB;MAEA,GAAGE,IAAOC,IAAG;AACX,eAAO,GAAGF,CAAC,IAAIC,EAAK,KAAKC,EAAC;MAC5B;MAEA,EAAEC,IAAG;AACI,eAAA,GAAGH,CAAC,KAAKG,EAAC;MACnB;MAEA,GAAGD,IAAGC,IAAG;AACP,eAAO,GAAGH,CAAC,KAAKE,EAAC,KAAKC,EAAC;MACzB;IAAA;EAEJ;AAiBS,WAAAC,EAAqBL,IAASM,GAAqB;AAC1D,WAAI,UAAU,SAAS,IAAU,MAAMN,EAAI,KACpCM,MAAc,OAAO,KAAM,MAAMN,EAAI;EAC9C;AAEA,SAAAD,EAAI,KAAKM,GAEFN;AACT;;;ACvHa,IAAAQ,IAAMC,EAAQC,CAAU;;;ACkF9B,SAASC,EAAiBC,IAAgC;AAC/D,QAAMC,KAAyB,CAAA;AAC/B,MAAIC,KAASF,GAAG;AAChB,SAAOE;AACDA,IAAAA,GAAO,eAAeA,GAAO,gBAC/BD,GAAQ,KAAKC,EAAM,GAGrBA,KAASA,GAAO;AAEX,SAAAD;AACT;AAEA,IAAME,IAAAA,oBAAoB,IAAA;AAA1B,IACMC,IAAW,IAAI,eAAe,CAASC,OAAA;AAC7BF,IAAA,QAAQ,CAAMG,OAAAA,GAAI,CAAA;AAClC,CAAC;AAOe,SAAAC,GAAUP,IAAiBQ,IAAgB;AACzDJ,IAAS,QAAQJ,EAAE,GACLG,EAAA,IAAIH,IAAIQ,EAAE;AAC1B;AAMO,SAASC,EAAYT,IAAiB;AAC3CI,IAAS,UAAUJ,EAAE,GACrBG,EAAc,OAAOH,EAAE;AACzB;",
  "names": ["str", "s", "p", "n", "int", "__publicField", "_Dater", "date", "_Tree", "data", "index", "node", "_Tween", "p", "arr", "arr", "s", "__publicField", "s", "arr", "dft", "s", "obj", "o", "o", "p", "_WebStorage", "__privateAdd", "__publicField", "__privateSet", "__privateGet", "_WebCache", "NAME_SPACE", "CLS_PREFIX", "FORM_EMPTY_CONTENT", "makeBEM", "prefix", "bem", "name", "b", "block", "e", "m", "is", "condition", "bem", "makeBEM", "CLS_PREFIX", "getScrollParents", "el", "parents", "parent", "observerElMap", "observer", "entry", "fn", "observeEl", "cb", "unobserveEl"]
}
